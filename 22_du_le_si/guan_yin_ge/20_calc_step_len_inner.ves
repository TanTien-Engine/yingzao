var node0 = ::blueprint::nodes::func_in::FuncIn()

node0.var_name = "step"
node0.var_type = "int"

_editor.add_node(node0, -817.65030999995, 162.16855245154)

var node1 = ::blueprint::nodes::func_out::FuncOut()

node1.var_name = "len"
node1.var_type = "num"

_editor.add_node(node1, 366.99786884935, -105.92075005936)

var node2 = ::blueprint::nodes::function::Function()

node2.set_size(1449.7984709622, 935.6042283682)
node2.title = "calc_step_len"

_editor.add_node(node2, -198.30955398605, 233.7134461818)

var node3 = ::blueprint::nodes::output::Output()

node3.var_name = "func"
node3.var_type = "func"

_editor.add_node(node3, 747.66198721262, 242.0881751991)

var node4 = ::blueprint::nodes::switch_f::SwitchF()

_editor.add_node(node4, -617.58517975055, -466.54032633007)

var node5 = ::blueprint::nodes::number::Number()

node5.value = 1

_editor.add_node(node5, -773.92299822525, -454.03538783959)

var node6 = ::blueprint::nodes::branch_f::BranchF()

_editor.add_node(node6, 232.1550422989, -129.1970167096)

var node7 = ::blueprint::nodes::property::Property()

node7.var_name = "rot"
node7.var_type = "bool"

_editor.add_node(node7, 36.2544821828, 52.247335016331)

var node8 = ::blueprint::nodes::pi::Pi()

_editor.add_node(node8, -385.39311802194, -420.36433397982)

var node9 = ::blueprint::nodes::cos::Cos()

_editor.add_node(node9, -242.89950655936, -452.80309719203)

var node10 = ::blueprint::nodes::number::Number()

node10.value = 1

_editor.add_node(node10, -241.18498900035, -389.32658282842)

var node11 = ::blueprint::nodes::divide::Divide()

_editor.add_node(node11, -100.04849161806, -378.56377615999)

var node12 = ::blueprint::nodes::multiply::Multiply()

_editor.add_node(node12, 45.764236598799, -297.988951352)

var node13 = ::blueprint::nodes::branch_f::BranchF()

_editor.add_node(node13, -353.68589604125, -108.80593193833)

var node14 = ::blueprint::nodes::compare::Compare()

node14.cmp = "greater"

_editor.add_node(node14, -500.40624829125, 143.9009374779)

var node15 = ::blueprint::nodes::integer::Integer()

node15.value = 0

_editor.add_node(node15, -635.26928197699, 107.42854695002)

var node16 = ::blueprint::nodes::switch_f::SwitchF()

_editor.add_node(node16, -631.16232092705, -82.776599058359)

var node17 = ::blueprint::nodes::number::Number()

node17.value = 1

_editor.add_node(node17, -778.9869997509, -16.9821832179)

var node18 = ::blueprint::nodes::number::Number()

node18.value = 0

_editor.add_node(node18, -777.42213637526, -80.484743294292)

var node19 = ::blueprint::nodes::number::Number()

node19.value = 0.29

_editor.add_node(node19, -776.59568605888, -145.77399142188)

var node20 = ::blueprint::nodes::number::Number()

node20.value = 0.17

_editor.add_node(node20, -777.42213687968, -209.41036363343)

var node21 = ::blueprint::nodes::negate::Negate()

_editor.add_node(node21, -617.75358214882, -329.36633977316)

Blueprint.connect(node8, "pi/6", node9, "v")
Blueprint.connect(node10, "v", node11, "a")
Blueprint.connect(node9, "v", node11, "b")
Blueprint.connect(node2, "func", node3, "var")
Blueprint.connect(node0, "var", node21, "v")
Blueprint.connect(node21, "v", node4, "type")
Blueprint.connect(node5, "v", node4, "default")
Blueprint.connect(node0, "var", node16, "type")
Blueprint.connect(node17, "v", node16, "default")
Blueprint.connect(node18, "v", node16, "case0")
Blueprint.connect(node19, "v", node16, "case1")
Blueprint.connect(node20, "v", node16, "case2")
Blueprint.connect(node0, "var", node14, "a")
Blueprint.connect(node15, "v", node14, "b")
Blueprint.connect(node14, "out", node13, "cond")
Blueprint.connect(node16, "result", node13, "true")
Blueprint.connect(node4, "result", node13, "false")
Blueprint.connect(node13, "result", node12, "a")
Blueprint.connect(node11, "v", node12, "b")
Blueprint.connect(node7, "var", node6, "cond")
Blueprint.connect(node12, "v", node6, "true")
Blueprint.connect(node13, "result", node6, "false")
Blueprint.connect(node6, "result", node1, "var")

import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant
import "blueprint.variant_proxy" for VariantProxy
//import "blueprint.nodes.list_flatten" for ListFlatten
import "geograph.nodes.brush_instanced" for BrushInstanced
import "geograph.nodes.brush_merge" for BrushMerge
import "scenegraph.nodes.transform3d" for Transform3d
import "tuangraph.constant" for BEAM_DX, FRAME_DIST, STYLE_TING_TANG, STYLE_CHUAN_DOU
import "tuangraph.trans_nodes" for TransNodes
import "tuangraph.nodes.multi_frames" for MultiFrames
import "tuangraph.nodes.dou_gong" for DouGong
import "tuangraph.nodes.add_column" for AddColumn
import "tuangraph.nodes.move_column" for MoveColumn
import "tuangraph.nodes.del_column" for DelColumn
import "tuangraph.nodes.frame_style" for FrameStyle
import "maths.vector" for Vector3
import "math" for Math
//import "editor.node_cache" for NODE_CACHE

class BeamFrame
{
	init()
	{
		this.column_idx = []

		this.shun_fu_chuan = false

		this.root = nil

		this.cao = nil

		this.frames_num = 0
		this.dg_steps   = 6

		this.move_column = 0
		this.del_column  = 0

		this.style = STYLE_TING_TANG
	}

	rebuild(scene, out_list)
	{
		import "tuangraph.nodes.ji_tuan" for JiTuan

		this.prepare(scene)

		this.column_idx.clear()
		this.shun_fu_chuan = false

		var comp_nodes = []
		for (var node in scene.nodes) 
		{
			var bp_node = node.components["bp"]
			if (bp_node and bp_node.has_method("resolve_geo(_)")) {
				comp_nodes.add(bp_node)
				if (bp_node is JiTuan) {
					this.root = bp_node
				}
			}
		}
		var sorted_nodes = Blueprint.topo_sort(comp_nodes)		

		// pass 1, deep
		for (var node in sorted_nodes) {
			node.resolve_deep(this)
		}

		// pass 2, height
		for (var node in sorted_nodes) {
			node.resolve_height(this)
		}

		// pass 3, geo
		var geos = []
		for (var node in sorted_nodes) {
			geos.add(node.resolve_geo(this))
		}

		// multi frames
//		if (true or this.frames_num > 0)
		if (this.frames_num > 0)
		{
			var num = this.frames_num
			//var num = 3
			
			this.copy_frames(geos, num, out_list)

			// pan jian
			if (this.style != STYLE_CHUAN_DOU)
			{
				for (var i in 0..num) 
				{
					if (Math.mod(i, 2) > 0) {
						for (var node in sorted_nodes) {
							out_list.add(node.resolve_pj_geo(this, FRAME_DIST * i))
						}
					}
				}
			}
		}
		else
		{
			for (var i in geos) {
				out_list.add(i)
			}
		}
	}

	prepare(scene)
	{
		this.cao = nil
		this.frames_num = 0
		this.dg_steps   = 6
		this.move_column = 0
		this.del_column  = 0
		this.style = STYLE_TING_TANG

		for (var node in scene.nodes) 
		{
			var bp_node = node.components["bp"]
			if (bp_node is AddColumn) {
				this.cao = bp_node.query_param("type").value
			} else if (bp_node is MultiFrames) {
				this.frames_num = bp_node.query_param("num").value
			} else if (bp_node is DouGong) {
				this.dg_steps = bp_node.query_param("steps").value
			} else if (bp_node is MoveColumn) {
				this.move_column = bp_node.query_param("dist").value
			} else if (bp_node is DelColumn) {
				this.del_column = bp_node.query_param("num").value
			} else if (bp_node is FrameStyle) {
				this.style = bp_node.query_param("style").value
			}
		}
	}

	copy_frames(frame_geos, num, dst)
	{
		var MATERIAL = false

		var B_INST = BrushInstanced()
		if (MATERIAL)
		{
//			var FLATTEN = ListFlatten()
//			Blueprint.connect(VariantProxy(Variant(frame_geos)), "out", FLATTEN, "list")

//			var SET_MATERIAL = NODE_CACHE.fetch("../yingzao/99_tools/set_vertex_material.ves", nil)
//			Blueprint.connect(FLATTEN, "list", SET_MATERIAL, "geo")

//			var MERGE = BrushMerge()
//			Blueprint.connect(SET_MATERIAL, "geo", MERGE, "list")

			Blueprint.connect(VariantProxy(Variant(frame_geos)), "out", B_INST, "brush")
		}
		else
		{
			var MERGE = BrushMerge()
			Blueprint.connect(VariantProxy(Variant(frame_geos)), "out", MERGE, "list")

			Blueprint.connect(MERGE, "brush", B_INST, "brush")
		}

		var mats = []
		var TRANS = Transform3d()
		for (var i in 0..num)
		{
			Blueprint.connect(VariantProxy(Variant(Vector3(0, 0, FRAME_DIST * i))), "out", TRANS, "translate")
			mats.add(Blueprint.calc_output_value(TRANS, "mat").value)
		}

		Blueprint.connect(VariantProxy(Variant(mats)), "out", B_INST, "transforms")

		dst.add(Blueprint.calc_output_value(B_INST, "instanced"))
	}
}
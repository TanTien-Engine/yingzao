import "editor.node_cache" for NODE_CACHE
import "blueprint.variant" for Variant
import "blueprint.variant_proxy" for VariantProxy
import "blueprint.blueprint" for Blueprint
import "geograph.nodes.plane" for Plane
import "geograph.nodes.box" for Box
import "geograph.nodes.column" for Column
import "geograph.nodes.rotate" for Rotate
import "beamgraph.trans_nodes" for TransNodes
import "beamgraph.constant" for FRAME_DIST, STYLE_DIAN_TANG, STYLE_CHUAN_DOU
import "beamgraph.context" for CONTEXT

import "maths.vector" for Vector3
import "math" for Math

class CompNodes
{
	static create_tuan(pos)
	{
		var TUAN = NODE_CACHE.fetch("../yingzao/00_dougong2/44_tuan.ves", nil)

		Blueprint.connect(VariantProxy(Variant(FRAME_DIST)), "out", TUAN, "length")
		
		return TransNodes.transform(TUAN, pos, -Math.pi() * 0.5)
	}

	static create_column(pos, height, diam, base)
	{
		var COLUMN = NODE_CACHE.fetch("../yingzao/01_beam_column/10_column.ves", nil)

		var radius_node = VariantProxy(Variant(diam * 0.5))
		Blueprint.connect(radius_node, "out", COLUMN, "radius")	

		var h_node = VariantProxy(Variant(height))
		Blueprint.connect(h_node, "out", COLUMN, "height")

		Blueprint.connect(VariantProxy(Variant(!base)), "out", COLUMN, "no_base")

		var ret = TransNodes.transform(COLUMN, pos, -Math.pi() * 0.5)

		h_node.disconnect()

		return ret
	}	

	static create_column(bf, pos, height)
	{
		var diam = 0.36
		if (bf.style == STYLE_DIAN_TANG) {
			diam = 0.42
		} else if (bf.style == STYLE_CHUAN_DOU) {
			diam = 0.25
		}
		return this.create_column(pos, height, diam, true)
	}

	static create_straight_beam(pos, h, len)
	{
		var BEAM = NODE_CACHE.fetch("../yingzao/00_dougong2/45_straight_beam.ves", nil)

		//var entasis = (h >= 0.24)
		var entasis = true
		var e_node = VariantProxy(Variant(entasis))
		Blueprint.connect(e_node, "out", BEAM, "entasis")

		var h_node = VariantProxy(Variant(h))
		Blueprint.connect(h_node, "out", BEAM, "height")

		var len_node = VariantProxy(Variant(len))
		Blueprint.connect(len_node, "out", BEAM, "length")
		
		Blueprint.connect(VariantProxy(Variant(false)), "out", BEAM, "left")

		var v_geo = TransNodes.transform(BEAM, pos, -Math.pi() * 0.5)
		return v_geo
	}

	static create_crescent_beam(pos, h, len)
	{
		var BEAM = NODE_CACHE.fetch("../yingzao/00_dougong2/45_crescent_beam.ves", nil)

		var h_node = VariantProxy(Variant(h))
		Blueprint.connect(h_node, "out", BEAM, "height")

		var w_node = VariantProxy(Variant(h * 2 / 3))
		Blueprint.connect(w_node, "out", BEAM, "width")

		var h_len_node = VariantProxy(Variant(0.09))
		Blueprint.connect(h_len_node, "out", BEAM, "head_len")

		var len_node = VariantProxy(Variant(len))
		Blueprint.connect(len_node, "out", BEAM, "length")

		var v_geo = TransNodes.transform(BEAM, pos, -Math.pi() * 0.5)

		var offset = len * 0.5
		v_geo = TransNodes.translate(VariantProxy(v_geo), Vector3(offset, 0, 0))

		return v_geo
	}

	static create_column_beam(pos, len, rot)
	{
		var BEAM = NODE_CACHE.fetch("../yingzao/01_beam_column/00_column_beam.ves", nil)		

		var r_node = VariantProxy(Variant(0.1))
		Blueprint.connect(r_node, "out", BEAM, "radius")

		var len_node = VariantProxy(Variant(len))
		Blueprint.connect(len_node, "out", BEAM, "length")

		var rot_node = VariantProxy(Variant(rot))
		Blueprint.connect(rot_node, "out", BEAM, "rot")

		var v_geo = TransNodes.transform(BEAM, pos, -Math.pi() * 0.5)

		return v_geo
	}

	static create_tuo_feng(pos, h)
	{
		var s = h / 0.25

		var TUO = NODE_CACHE.fetch("../yingzao/00_dougong2/47_tuo_feng.ves", nil)
		var tuo = TransNodes.scale(TUO, Vector3(1.0, s, s))
		tuo = TransNodes.transform(VariantProxy(tuo), pos, -Math.pi() * 0.5)

		return Variant(tuo)
	}

	static create_cha_shou(pos, dy, dx)
	{
		var CHA = NODE_CACHE.fetch("../yingzao/01_beam_column/51_cha_shou.ves", nil)

		var plane = Plane()
		plane.query_param("ori").value.y = -dy
		plane.query_param("dir").value.y = -1

		Blueprint.connect(plane, "plane", CHA, "cut_plane")

		var angle = Math.atan2(dy, dx)
		Blueprint.connect(VariantProxy(angle), "out", CHA, "angle")

		Blueprint.connect(VariantProxy(0.18), "out", CHA, "height")
		Blueprint.connect(VariantProxy(0.06), "out", CHA, "width")

		var l_cha = TransNodes.transform(CHA, pos, -Math.pi() * 0.5)
		var r_cha = TransNodes.rotate(VariantProxy(l_cha), Math.pi())

		return Variant([ l_cha, r_cha ])
	}

	static create_tuo_jiao(pos, dy, dx, rot)
	{
		var TUO = NODE_CACHE.fetch("../yingzao/01_beam_column/51_cha_shou.ves", nil)

		var plane = Plane()
		plane.query_param("ori").value.y = -dy
		plane.query_param("dir").value.y = -1

		Blueprint.connect(plane, "plane", TUO, "cut_plane")

		var angle = Math.atan2(dy, dx)
		Blueprint.connect(VariantProxy(angle), "out", TUO, "angle")

		Blueprint.connect(VariantProxy(0.15), "out", TUO, "height")
		Blueprint.connect(VariantProxy(0.05), "out", TUO, "width")

		var a = -Math.pi() * 0.5
		if (rot) {
			a = a + Math.pi()
		}
		var tuo = TransNodes.transform(TUO, pos, a)

		return Variant(tuo)
	}

	static create_yuan(p0, p1, extend)
	{
		var YUAN = NODE_CACHE.fetch("../yingzao/01_beam_column/60_yuan.ves", nil)

		Blueprint.connect(VariantProxy(Variant(p0)), "out", YUAN, "p0")
		Blueprint.connect(VariantProxy(Variant(p1)), "out", YUAN, "p1")

		Blueprint.connect(VariantProxy(Variant(extend)), "out", YUAN, "extend")

		return Variant(Blueprint.calc_output_value(YUAN, "geo"))
	}

	static create_fei_zi(p0, p1, extend)
	{
		var YUAN = NODE_CACHE.fetch("../yingzao/01_beam_column/60_fei.ves", nil)

		Blueprint.connect(VariantProxy(Variant(p0)), "out", YUAN, "p0")
		Blueprint.connect(VariantProxy(Variant(p1)), "out", YUAN, "p1")

		Blueprint.connect(VariantProxy(Variant(extend)), "out", YUAN, "extend")

		return Variant(Blueprint.calc_output_value(YUAN, "geo"))
	}

	static create_lan_e_fang(pos)
	{
		var E_FANG = NODE_CACHE.fetch("../yingzao/00_dougong2/48_e_fang.ves", nil)

		Blueprint.connect(VariantProxy(Variant(FRAME_DIST)), "out", E_FANG, "length")
		Blueprint.connect(VariantProxy(Variant(0.15)), "out", E_FANG, "width")
		Blueprint.connect(VariantProxy(Variant(0.30)), "out", E_FANG, "height")

		return TransNodes.transform(E_FANG, pos, -Math.pi() * 0.5)
	}

	static create_nei_e_fang(pos, height, length)
	{
		var E_FANG = NODE_CACHE.fetch("../yingzao/00_dougong2/48_e_fang.ves", nil)

		Blueprint.connect(VariantProxy(Variant(length)), "out", E_FANG, "length")
		Blueprint.connect(VariantProxy(Variant(height / 3 * 2)), "out", E_FANG, "width")
		Blueprint.connect(VariantProxy(Variant(height)), "out", E_FANG, "height")

		return TransNodes.transform(E_FANG, pos, 0)		
	}

	static create_cheng_yuan_fang(pos)
	{
		var E_FANG = NODE_CACHE.fetch("../yingzao/00_dougong2/48_e_fang.ves", nil)

		Blueprint.connect(VariantProxy(Variant(FRAME_DIST)), "out", E_FANG, "length")
		Blueprint.connect(VariantProxy(Variant(0.18)), "out", E_FANG, "width")
		Blueprint.connect(VariantProxy(Variant(0.27)), "out", E_FANG, "height")

		return TransNodes.transform(E_FANG, pos, -Math.pi() * 0.5)
	}

	static create_pj_fang(pos)
	{
		var FANG = NODE_CACHE.fetch("../yingzao/00_dougong2/13_fang.ves", nil)

		Blueprint.connect(VariantProxy(Variant(FRAME_DIST)), "out", FANG, "length")

		return TransNodes.transform(FANG, pos, -Math.pi() * 0.5)	
	}

	static create_shun_fu_chuan(pos, len)
	{
		var box = Box()

		var h = 0.21

		var sz = box.query_param("size").value
		sz.x = len
		sz.y = h
		sz.z = 0.1

		box.query_param("offset_y").value = true
		box.query_param("offset_x").value = true

		return TransNodes.translate(box, Vector3(pos.x, pos.y - h, pos.z))
	}

	static create_ti_mu(pos)
	{
		var TI_MU = NODE_CACHE.fetch("../yingzao/00_dougong2/43_ti_mu.ves", nil)

		Blueprint.connect(VariantProxy(Variant(0.96)), "out", TI_MU, "length")

		return TransNodes.transform(TI_MU, pos, -Math.pi() * 0.5)	
	}

	static create_box(pos, size)
	{
		var box = Box()

		var sz = box.query_param("size").value
		sz.x = size.x
		sz.y = size.y
		sz.z = size.z

		box.query_param("offset_y").value = true
		box.query_param("offset_x").value = true

		return TransNodes.translate(box, pos)		
	}

	static create_ping(pos, x_len, z_len)
	{
		var dist = 0.8
		var h = 0.05
		var w = 0.04

		if (!CONTEXT.ping_simple) {
			pos.y = pos.y + h		
		}

		var ret = []

		ret.add(CompNodes.create_box(pos, Vector3(x_len, 0.02, z_len)))

		if (!CONTEXT.ping_simple)
		{
			var p = Vector3(pos.x, pos.y - h, pos.z)
			for (var x = 0; x < x_len; x = x + dist) {
				ret.add(CompNodes.create_box(p, Vector3(w, h, z_len)))
				p.x = p.x + dist
			}

			p = Vector3(pos.x, pos.y - h, pos.z - z_len * 0.5)
			for (var z = 0; z < z_len; z = z + dist) {
				ret.add(CompNodes.create_box(p, Vector3(x_len, h, w)))
				p.z = p.z + dist
			}
		}

		return Variant(ret)		
	}

	static create_ping_border(pos, x_dist, y_dist, z_len, mirror)
	{
		var dy = y_dist

		var step_len = x_dist - 0.05 * 2
		var angle = Math.atan2(dy, step_len)

		var x_len = Math.sqrt(dy * dy + step_len * step_len)

		var geos = []

		var h = 0.02

		var h_panel = 0.02
		var v_panel = CompNodes.create_box(Vector3(0, 0, 0), Vector3(x_len, h_panel, z_len))
		if (!this.ping_simple) {
			v_panel = TransNodes.translate(VariantProxy(v_panel), Vector3(0, h + h_panel, 0))
		}
		geos.add(v_panel)

		if (!CONTEXT.ping_simple)
		{
			var dist = 0.1
			var p = Vector3(0, 0, - z_len * 0.5)
			for (var z = 0; z < z_len; z = z + dist) {
				geos.add(CompNodes.create_box(p, Vector3(x_len, 0.05, h)))
				p.z = p.z + dist
			}
		}

		var rot_y = 0
		var dx = 0.05
		if (mirror) {
			rot_y = Math.pi()
			dx = -dx
		}

		var rot = Rotate()
		Blueprint.connect(VariantProxy(Variant(geos)), "out", rot, "geo")
		Blueprint.connect(VariantProxy(Variant(Vector3(0, rot_y, angle))), "out", rot, "rot_xyz")

		var v_geo = Blueprint.calc_output_value(rot, "geo")

		v_geo = TransNodes.translate(VariantProxy(v_geo), Vector3(pos.x + dx, pos.y, pos.z))

		return v_geo
	}

	static create_ping_border_flat(pos, z_len, mirror)
	{
		var step_len = 0.3
		var h_panel = 0.02

		return CompNodes.create_box(pos, Vector3(x_len, h_panel, z_len))
	}	

	static create_jing_gan_columns(btm, top, x_min, x_max)
	{
		var ret = []

		var diam = 0.1 * 2

		var num = (top - btm) / diam
		var dx = (x_max - x_min) / num
		var dy = (top - btm) / num

		var y = btm
		var x_len = x_max + 0.4
		for (var i in 0..num)
		{
			ret.add(CompNodes.create_column_beam(Vector3(0, y, 0), x_len, true))
			y = y + dy
			x_len = x_len - dx
		}

		return Variant(ret)
	}

	static create_jing_gan_columns(x, h)
	{
		var ret = []

		var diam = 0.1 * 2

		var offset_y = 0.1
		var num = (h - offset_y) / diam
		var dh = (h - offset_y) / num
		for (var i in 0..num) {
			ret.add(CompNodes.create_column_beam(Vector3(x, dh * i + offset_y, 0), FRAME_DIST, false))
		}

		return Variant(ret)
	}
}
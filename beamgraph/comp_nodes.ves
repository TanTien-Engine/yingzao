import "editor.node_cache" for NODE_CACHE
import "blueprint.variant" for Variant
import "blueprint.variant_proxy" for VariantProxy
import "blueprint.blueprint" for Blueprint
import "geograph.nodes.plane" for Plane
import "geograph.nodes.box" for Box
import "beamgraph.trans_nodes" for TransNodes
import "beamgraph.constant" for FRAME_DIST, FRAME_STYLE, STYLE_DIAN_TANG
import "maths.vector" for Vector3
import "math" for Math

class CompNodes
{
	static create_tuan(pos)
	{
		var TUAN = NODE_CACHE.fetch("../yingzao/00_dougong2/44_tuan.ves", nil)

		Blueprint.connect(VariantProxy(Variant(FRAME_DIST)), "out", TUAN, "length")
		
		return TransNodes.transform(TUAN, pos, -Math.pi() * 0.5)
	}

	static create_column(pos, height)
	{
		var COLUMN = NODE_CACHE.fetch("../yingzao/01_beam_column/10_column.ves", nil)

		var d = 0.36
		if (FRAME_STYLE == STYLE_DIAN_TANG) {
			d = 0.42
		}
		var radius_node = VariantProxy(Variant(d * 0.5))
		Blueprint.connect(radius_node, "out", COLUMN, "radius")	

		var h_node = VariantProxy(Variant(height))
		Blueprint.connect(h_node, "out", COLUMN, "height")

		Blueprint.connect(VariantProxy(Variant(false)), "out", COLUMN, "no_base")

		var ret = TransNodes.transform(COLUMN, pos, -Math.pi() * 0.5)

		h_node.disconnect()

		return ret
	}

	static create_straight_beam(pos, h, len)
	{
		var BEAM = NODE_CACHE.fetch("../yingzao/00_dougong2/45_straight_beam.ves", nil)

		//var entasis = (h >= 0.24)
		var entasis = true
		var e_node = VariantProxy(Variant(entasis))
		Blueprint.connect(e_node, "out", BEAM, "entasis")

		var h_node = VariantProxy(Variant(h))
		Blueprint.connect(h_node, "out", BEAM, "height")

		var len_node = VariantProxy(Variant(len))
		Blueprint.connect(len_node, "out", BEAM, "length")
		
		Blueprint.connect(VariantProxy(Variant(false)), "out", BEAM, "left")

		var v_geo = TransNodes.transform(BEAM, pos, -Math.pi() * 0.5)
		return v_geo
	}

	static create_crescent_beam(pos, h, len)
	{
		var BEAM = NODE_CACHE.fetch("../yingzao/00_dougong2/45_crescent_beam.ves", nil)

		var h_node = VariantProxy(Variant(h))
		Blueprint.connect(h_node, "out", BEAM, "height")

		var w_node = VariantProxy(Variant(h * 2 / 3))
		Blueprint.connect(w_node, "out", BEAM, "width")

		var h_len_node = VariantProxy(Variant(0.09))
		Blueprint.connect(h_len_node, "out", BEAM, "head_len")

		var len_node = VariantProxy(Variant(len))
		Blueprint.connect(len_node, "out", BEAM, "length")

		var v_geo = TransNodes.transform(BEAM, pos, -Math.pi() * 0.5)

		var offset = len * 0.5
		v_geo = TransNodes.translate(VariantProxy(v_geo), Vector3(offset, 0, 0))

		return v_geo
	}

	static create_tuo_feng(pos, h)
	{
		var s = h / 0.25

		var TUO = NODE_CACHE.fetch("../yingzao/00_dougong2/47_tuo_feng.ves", nil)
		var tuo = TransNodes.scale(TUO, Vector3(1.0, s, s))
		tuo = TransNodes.transform(VariantProxy(tuo), pos, -Math.pi() * 0.5)

		return Variant(tuo)
	}

	static create_cha_shou(pos, dy, dx)
	{
		var CHA = NODE_CACHE.fetch("../yingzao/01_beam_column/51_cha_shou.ves", nil)

		var plane = Plane()
		plane.query_param("ori").value.y = -dy
		plane.query_param("dir").value.y = -1

		Blueprint.connect(plane, "plane", CHA, "cut_plane")

		var angle = Math.atan2(dy, dx)
		Blueprint.connect(VariantProxy(angle), "out", CHA, "angle")

		Blueprint.connect(VariantProxy(0.18), "out", CHA, "height")
		Blueprint.connect(VariantProxy(0.06), "out", CHA, "width")

		var l_cha = TransNodes.transform(CHA, pos, -Math.pi() * 0.5)
		var r_cha = TransNodes.rotate(VariantProxy(l_cha), Math.pi())

		return Variant([ l_cha, r_cha ])
	}

	static create_tuo_jiao(pos, dy, dx, rot)
	{
		var TUO = NODE_CACHE.fetch("../yingzao/01_beam_column/51_cha_shou.ves", nil)

		var plane = Plane()
		plane.query_param("ori").value.y = -dy
		plane.query_param("dir").value.y = -1

		Blueprint.connect(plane, "plane", TUO, "cut_plane")

		var angle = Math.atan2(dy, dx)
		Blueprint.connect(VariantProxy(angle), "out", TUO, "angle")

		Blueprint.connect(VariantProxy(0.15), "out", TUO, "height")
		Blueprint.connect(VariantProxy(0.05), "out", TUO, "width")

		var a = -Math.pi() * 0.5
		if (rot) {
			a = a + Math.pi()
		}
		var tuo = TransNodes.transform(TUO, pos, a)

		return Variant(tuo)
	}

	static create_yuan(p0, p1, extend)
	{
		var YUAN = NODE_CACHE.fetch("../yingzao/01_beam_column/60_yuan.ves", nil)

		Blueprint.connect(VariantProxy(Variant(p0)), "out", YUAN, "p0")
		Blueprint.connect(VariantProxy(Variant(p1)), "out", YUAN, "p1")

		Blueprint.connect(VariantProxy(Variant(extend)), "out", YUAN, "extend")

		return Variant(Blueprint.calc_output_value(YUAN, "geo"))
	}

	static create_fei_zi(p0, p1, extend)
	{
		var YUAN = NODE_CACHE.fetch("../yingzao/01_beam_column/60_fei.ves", nil)

		Blueprint.connect(VariantProxy(Variant(p0)), "out", YUAN, "p0")
		Blueprint.connect(VariantProxy(Variant(p1)), "out", YUAN, "p1")

		Blueprint.connect(VariantProxy(Variant(extend)), "out", YUAN, "extend")

		return Variant(Blueprint.calc_output_value(YUAN, "geo"))
	}

	static create_lan_e_fang(pos)
	{
		var E_FANG = NODE_CACHE.fetch("../yingzao/00_dougong2/48_e_fang.ves", nil)

		Blueprint.connect(VariantProxy(Variant(FRAME_DIST)), "out", E_FANG, "length")
		Blueprint.connect(VariantProxy(Variant(0.15)), "out", E_FANG, "width")
		Blueprint.connect(VariantProxy(Variant(0.30)), "out", E_FANG, "height")

		return TransNodes.transform(E_FANG, pos, -Math.pi() * 0.5)
	}

	static create_cheng_yuan_fang(pos)
	{
		var E_FANG = NODE_CACHE.fetch("../yingzao/00_dougong2/48_e_fang.ves", nil)

		Blueprint.connect(VariantProxy(Variant(FRAME_DIST)), "out", E_FANG, "length")
		Blueprint.connect(VariantProxy(Variant(0.1)), "out", E_FANG, "width")
		Blueprint.connect(VariantProxy(Variant(0.2)), "out", E_FANG, "height")

		return TransNodes.transform(E_FANG, pos, -Math.pi() * 0.5)
	}

	static create_pj_fang(pos)
	{
		var FANG = NODE_CACHE.fetch("../yingzao/00_dougong2/13_fang.ves", nil)

		Blueprint.connect(VariantProxy(Variant(FRAME_DIST)), "out", FANG, "length")

		return TransNodes.transform(FANG, pos, -Math.pi() * 0.5)	
	}

	static create_shun_fu_chuan(pos, len)
	{
		var box = Box()

		var h = 0.21

		var sz = box.query_param("size").value
		sz.x = len
		sz.y = h
		sz.z = 0.1

		box.query_param("offset_y").value = true
		box.query_param("offset_x").value = true

		return TransNodes.translate(box, Vector3(pos.x, pos.y - h, pos.z))
	}

	static create_ti_mu(pos)
	{
		var TI_MU = NODE_CACHE.fetch("../yingzao/00_dougong2/43_ti_mu.ves", nil)

		Blueprint.connect(VariantProxy(Variant(0.96)), "out", TI_MU, "length")

		return TransNodes.transform(TI_MU, pos, -Math.pi() * 0.5)	
	}	
}
import "editor.node_cache" for NODE_CACHE
import "blueprint.variant" for Variant
import "blueprint.variant_proxy" for VariantProxy
import "blueprint.blueprint" for Blueprint
import "beamgraph.trans_nodes" for TransNodes
import "maths.vector" for Vector3
import "math" for Math

class CompNodes
{
	static create_chuan(pos)
	{
		var CHUAN  = NODE_CACHE.fetch("../yingzao/00_dougong2/44_chuan.ves", nil)
		return TransNodes.transform(CHUAN, pos, -Math.pi() * 0.5)
	}

	static create_column(pos, height)
	{
		var COLUMN = NODE_CACHE.fetch("../yingzao/00_dougong2/46_column.ves", nil)

		var d = 0.36
		var radius_node = VariantProxy(Variant(d * 0.5))
		Blueprint.connect(radius_node, "out", COLUMN, "radius")	

		var h = d * 8 + height
		var h_node = VariantProxy(Variant(h))
		Blueprint.connect(h_node, "out", COLUMN, "height")

		var ret = TransNodes.translate(COLUMN, Vector3(pos.x, pos.y, pos.z))

		h_node.disconnect()

		return ret
	}

	static create_straight_beam(pos, h, len)
	{
		var BEAM = NODE_CACHE.fetch("../yingzao/00_dougong2/45_straight_beam.ves", nil)

		var entasis = (h >= 0.24)
		var e_node = VariantProxy(Variant(entasis))
		Blueprint.connect(e_node, "out", BEAM, "entasis")

		var h_node = VariantProxy(Variant(h))
		Blueprint.connect(h_node, "out", BEAM, "height")

		var len_node = VariantProxy(Variant(len))
		Blueprint.connect(len_node, "out", BEAM, "length")
		
		var v_geo = TransNodes.transform(BEAM, pos, -Math.pi() * 0.5)
		return v_geo
	}

	static create_crescent_beam(pos, h, len)
	{
		var BEAM = NODE_CACHE.fetch("../yingzao/00_dougong2/45_crescent_beam.ves", nil)

		var h_node = VariantProxy(Variant(h))
		Blueprint.connect(h_node, "out", BEAM, "height")

		var w_node = VariantProxy(Variant(h * 2 / 3))
		Blueprint.connect(w_node, "out", BEAM, "width")

		var h_len_node = VariantProxy(Variant(0.09))
		Blueprint.connect(h_len_node, "out", BEAM, "head_len")

		var len_node = VariantProxy(Variant(len))
		Blueprint.connect(len_node, "out", BEAM, "length")

		var v_geo = TransNodes.transform(BEAM, pos, -Math.pi() * 0.5)

		var offset = len * 0.5
		v_geo = TransNodes.translate(VariantProxy(v_geo), Vector3(offset, 0, 0))

		return v_geo
	}

	static create_tuo_feng(pos, h)
	{
		var tuo_h = (h - 0.06)
		var tuo_s = tuo_h / 0.25

		var TUO = NODE_CACHE.fetch("../yingzao/00_dougong2/47_tuo_feng.ves", nil)
		var tuo = TransNodes.scale(TUO, Vector3(1.0, tuo_s, tuo_s))
		tuo = TransNodes.transform(VariantProxy(tuo), pos, -Math.pi() * 0.5)

		var DOU = NODE_CACHE.fetch("../yingzao/00_dougong2/21_san_dou.ves", nil)
		var dou = TransNodes.translate(DOU, Vector3(pos.x, pos.y + tuo_h, pos.z))

		return Variant([ tuo, dou ])
	}
}
import "blueprint.pin" for Pin
import "blueprint.node" for Node
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant
import "beamgraph.variant" for PIN_TYPE_CHUAN
import "beamgraph.chuan_helper" for ChuanHelper
import "beamgraph.constant" for BEAM_DX
import "beamgraph.comp_nodes" for CompNodes
import "maths.vector" for Vector3

class SubChuan is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "prev", PIN_TYPE_CHUAN),
		]
		this.exports = [
			Pin(this, "next", PIN_TYPE_CHUAN),
		]

		this.layout()

		this.deep = 0
		this.roof_height = 0
		this.base_height = 0

		this.max_deep = 0
	}

	resolve_deep(bf)
	{
		var prev = Blueprint.get_input_node(this, "prev")
		if (prev) {
			this.deep = prev.deep
		} else {
			this.deep = 0
		}

		this.max_deep = ChuanHelper.calc_tree_deep(this)
	}

	resolve_height(bf)
	{
		this.base_height = ChuanHelper.calc_tree_base_height(this)

		this.roof_height = (this.max_deep * 2 * BEAM_DX + 0.3 * 2) / 4
	}

	resolve_geo(bf)
	{
		var pos_l = Vector3(-BEAM_DX * this.deep, this.base_height + this.roof_height, 0)
		var pos_r = Vector3( BEAM_DX * this.deep, this.base_height + this.roof_height, 0)

		var fang_dh = 0.15
		var l_e_fang = CompNodes.create_cheng_yuan_fang(Vector3(pos_l.x, pos_l.y + fang_dh, pos_l.z))
		var r_e_fang = CompNodes.create_cheng_yuan_fang(Vector3(pos_r.x, pos_r.y + fang_dh, pos_r.z))

		var height = 0
		var next = Blueprint.get_output_node(this, "next")
		if (next) {
			height = this.roof_height - next.roof_height
		}

		var tuo_dh = 0.05
		var l_tuo_jiao = CompNodes.create_tuo_jiao(Vector3(pos_l.x, pos_l.y - tuo_dh, pos_l.z), height - tuo_dh, BEAM_DX - 0.3, false)
		var r_tuo_jiao = CompNodes.create_tuo_jiao(Vector3(pos_r.x, pos_r.y - tuo_dh, pos_r.z), height - tuo_dh, BEAM_DX - 0.3, true)

		return Variant([ l_e_fang, r_e_fang, l_tuo_jiao, r_tuo_jiao ])
	}

	resolve_pj_geo(bf, z)
	{
		return nil
	}

	get_title()
	{
		return "副阶槫"
	}
}

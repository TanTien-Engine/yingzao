import "blueprint.node" for Node
import "blueprint.node_param" for NodeParam
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant
import "blueprint.variant_proxy" for VariantProxy
import "beamgraph.comp_nodes" for CompNodes
import "beamgraph.constant" for BEAM_DX
import "beamgraph.context" for CONTEXT
import "beamgraph.gong_helper" for GongHelper
import "beamgraph.trans_nodes" for TransNodes
import "maths.vector" for Vector3
import "math" for Math

class AddColumn is Node
{
	init()
	{
		super.init()

		this.params.add(NodeParam("type", "center", { "combo" : [ "single", "double", "center" ] }))

		this.layout()
	}

	on_node_dirty()
	{
		CONTEXT.prop_changed = true
	}

	resolve_deep(bf)
	{
		bf.cao = this.query_param("type").value
	}

	resolve_height(bf)
	{
	}

	resolve_geo(bf)
	{
		if (!bf.root) {
			return nil
		}

		var h = bf.root.column_height
		var y = h

		var column = nil
		var dou_gong = nil
		var e_fang = nil

		var v_gong = GongHelper.create_inner_column()

		var type = this.query_param("type").value
		if (type == "single")
		{
			var x = - bf.root.max_deep * BEAM_DX * 0.5
			var p = Vector3(x, y, 0)

			column = CompNodes.create_column(p, h)
			dou_gong = TransNodes.transform(VariantProxy(v_gong), p, -Math.pi() * 0.5)
			e_fang = CompNodes.create_lan_e_fang(p)
		}
		else if (type == "double")
		{
			var x = - bf.root.max_deep * BEAM_DX * 0.5
			var p0 = Vector3(-x, y, 0)
			var p1 = Vector3( x, y, 0)

			var l_col = CompNodes.create_column(p0, h)
			var r_col = CompNodes.create_column(p1, h)
			column = Variant([ l_col, r_col ])

			var l_dg = TransNodes.transform(VariantProxy(v_gong), p0, -Math.pi() * 0.5)
			var r_dg = TransNodes.transform(VariantProxy(v_gong), p1, -Math.pi() * 0.5)			
			dou_gong = Variant([ l_dg, r_dg ])

			e_fang = Variant([ CompNodes.create_lan_e_fang(p0), CompNodes.create_lan_e_fang(p1) ])
		}
		else if (type == "center")
		{
			var p = Vector3(0, y, 0)

			column = CompNodes.create_column(p, h)
			dou_gong = TransNodes.transform(VariantProxy(v_gong), p, -Math.pi() * 0.5)
			e_fang = CompNodes.create_lan_e_fang(p)
		}
		else
		{
			column = nil
		}

		if (CONTEXT.vert_conn) {
			return Variant([ column, dou_gong, e_fang ])
		} else {
			return Variant([ column, dou_gong ])		
		}
	}

	resolve_pj_geo(bf, z)
	{	
	}

	get_title()
	{
		return "加柱"
	}
}
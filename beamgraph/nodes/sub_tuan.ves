import "blueprint.pin" for Pin
import "blueprint.node" for Node
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant
import "beamgraph.variant" for PIN_TYPE_TUAN
import "beamgraph.tuan_helper" for TuanHelper
import "beamgraph.constant" for BEAM_DX, STYLE_DIAN_TANG
import "beamgraph.comp_nodes" for CompNodes
import "maths.vector" for Vector3

class SubTuan is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "prev", PIN_TYPE_TUAN),
		]
		this.exports = [
			Pin(this, "next", PIN_TYPE_TUAN),
		]

		this.layout()

		this.deep = 0

		this.roof_height   = 0
		this.middle_height = 0
		this.column_height = 0

		this.tot_height = 0

		this.max_deep = 0
	}

	resolve_deep(bf)
	{
		var prev = Blueprint.get_input_node(this, "prev")
		if (prev) {
			this.deep = prev.deep
		} else {
			this.deep = 0
		}

		this.max_deep = TuanHelper.calc_tree_deep(this)
	}

	resolve_height(bf)
	{
		this.column_height = TuanHelper.calc_column_layer_height(bf, this)
		this.middle_height = TuanHelper.calc_middle_layer_height(bf, this)
		this.roof_height   = (this.max_deep * 2 * BEAM_DX + 0.3 * 2) / 5

		this.tot_height = this.column_height + this.middle_height + this.roof_height
	}

	resolve_geo(bf)
	{		
		var pos_l = Vector3(-BEAM_DX * this.deep, this.tot_height, 0)
		var pos_r = Vector3( BEAM_DX * this.deep, this.tot_height, 0)

		var fang_dh = 0.15
		var l_e_fang = CompNodes.create_cheng_yuan_fang(Vector3(pos_l.x, pos_l.y + fang_dh, pos_l.z))
		var r_e_fang = CompNodes.create_cheng_yuan_fang(Vector3(pos_r.x, pos_r.y + fang_dh, pos_r.z))

		var height = 0
		var next = Blueprint.get_output_node(this, "next")
		if (next) {
			height = this.roof_height - next.roof_height
		}

		var tuo_dh = 0.05
		var l_tuo_jiao = CompNodes.create_tuo_jiao(Vector3(pos_l.x, pos_l.y - tuo_dh, pos_l.z), height - tuo_dh, BEAM_DX - 0.3, false)
		var r_tuo_jiao = CompNodes.create_tuo_jiao(Vector3(pos_r.x, pos_r.y - tuo_dh, pos_r.z), height - tuo_dh, BEAM_DX - 0.3, true)

		var geos = [ l_e_fang, r_e_fang, l_tuo_jiao, r_tuo_jiao ]

		if (bf.style == STYLE_DIAN_TANG) {
			geos.add(CompNodes.create_nei_e_fang(Vector3(0, this.tot_height + fang_dh, 0), 0.27, BEAM_DX * this.deep * 2))
		}

		return Variant(geos)
	}

	resolve_pj_geo(bf, z)
	{
		return nil
	}

	get_title()
	{
		return "副阶槫"
	}
}

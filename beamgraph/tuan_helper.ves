import "blueprint.blueprint" for Blueprint
import "beamgraph.constant" for FRAME_STYLE, STYLE_DIAN_TANG, STYLE_TING_TANG, DG_STEPS
import "beamgraph.gong_helper" for GongHelper
import "beamgraph.beam_helper" for BeamHelper

class TuanHelper
{
	static calc_tree_deep(root)
	{
		import "beamgraph.nodes.tuan" for Tuan

		var max_deep = 0

		var next = Blueprint.get_output_node(root, "next")
		while (next and next is Tuan) {
			max_deep = max_deep + 1
			next = Blueprint.get_output_node(next, "next")
		}

		return max_deep
	}

	static calc_steps(root)
	{
		var steps = DG_STEPS
		if (FRAME_STYLE == STYLE_DIAN_TANG) 
		{
			import "beamgraph.nodes.sub_tuan" for SubTuan
			if (root is SubTuan) {
				steps = steps - 1
			}
		}
		else if (FRAME_STYLE == STYLE_TING_TANG) 
		{
			steps = 4
		}
		return steps
	}

	static calc_middle_layer_height(root)
	{
		var steps = this.calc_steps(root)
		if (steps == 5) {
			steps = steps + 1
		}
	
		var dh = 0
		if (FRAME_STYLE == STYLE_DIAN_TANG) 
		{
			import "beamgraph.nodes.sub_tuan" for SubTuan
			if (root is SubTuan and DG_STEPS == 5) {
				dh = 0.15
			} else {
				dh = 0.3			
			}
		} 
		else if (FRAME_STYLE == STYLE_TING_TANG) 
		{
			dh = 0.15
		}

		return GongHelper.calc_dou_gong_height(steps) + dh
	}

	static calc_column_layer_height(root)
	{
		import "beamgraph.nodes.sub_tuan" for SubTuan

		var sub_num = 0
		var next = Blueprint.get_output_node(root, "next")
		while (next) {
			if (next is SubTuan) {
				sub_num = sub_num + 1
			}
			next = Blueprint.get_output_node(next, "next")
		}

		if (sub_num == 0)
		{
			var h = 0
			if (FRAME_STYLE == STYLE_DIAN_TANG) {
				h = 3.3
			} else {
				h = 2.5
			}
			if (root is SubTuan) {
				h = h - 0.5
			}
			return h
		}

		if (FRAME_STYLE == STYLE_DIAN_TANG) 
		{
			var h_dg = GongHelper.calc_dou_gong_height(DG_STEPS - 1)
			if (DG_STEPS == 5) {
				h_dg = h_dg + 0.15
			} else {
				h_dg = h_dg + 0.5
			}
			return 2.8 + (1.6 + h_dg) * sub_num
		} 
		else 
		{
			var h_dg = GongHelper.calc_dou_gong_height(4)		
			return 2.0 + (1.1 + h_dg) * sub_num
		}
	}
}
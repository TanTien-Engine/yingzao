import "blueprint.blueprint" for Blueprint
import "blueprint.variant_proxy" for VariantProxy
import "blueprint.variant" for Variant
import "archgraph.trans_nodes" for TransNodes
import "editor.node_cache" for NODE_CACHE
import "math" for Math

fun get_geo_idx(geo_node)
{
	if (geo_node is VariantProxy) {
		return 0
	} else {
		return "geo"
	}
}

class JointsNodes
{
	static conn2(v_geo0, v_geo1, pos, angle)
	{
		var CONN2_JOINT = NODE_CACHE.fetch("../yingzao/00_dougong2/62_conn_2_joint.ves", nil)

		var n_geo0  = VariantProxy(v_geo0)
		var n_geo1  = VariantProxy(v_geo1)
		var n_pos   = VariantProxy(Variant(pos))
		var n_angle = VariantProxy(Variant(angle))

		Blueprint.connect(n_geo0,  "out", CONN2_JOINT, "geo0")
		Blueprint.connect(n_geo1,  "out", CONN2_JOINT, "geo1")
		Blueprint.connect(n_pos,   "out", CONN2_JOINT, "pos")
		Blueprint.connect(n_angle, "out", CONN2_JOINT, "angle")

		return [ Blueprint.calc_output_value(CONN2_JOINT, "geo0"), Blueprint.calc_output_value(CONN2_JOINT, "geo1") ]
	}

	static conn3(v_geo0, v_geo1, v_geo2, pos, angle)
	{
		var CONN3_JOINT = NODE_CACHE.fetch("../yingzao/00_dougong2/62_conn_3_joint.ves", nil)

		var n_geo0 = VariantProxy(v_geo0)
		var n_geo1 = VariantProxy(v_geo1)
		var n_geo2 = VariantProxy(v_geo2)
		var n_pos  = VariantProxy(Variant(pos))
		var n_angle = VariantProxy(Variant(angle))

		Blueprint.connect(n_geo0,  "out", CONN3_JOINT, "geo0")
		Blueprint.connect(n_geo1,  "out", CONN3_JOINT, "geo1")
		Blueprint.connect(n_geo2,  "out", CONN3_JOINT, "geo2")
		Blueprint.connect(n_pos,   "out", CONN3_JOINT, "pos")
		Blueprint.connect(n_angle, "out", CONN3_JOINT, "angle")

		return [ Blueprint.calc_output_value(CONN3_JOINT, "geo0"), Blueprint.calc_output_value(CONN3_JOINT, "geo1"), Blueprint.calc_output_value(CONN3_JOINT, "geo2") ]
	}

	static is_beam_wide_head(beam)
	{
		import "archgraph.component.beam" for Beam
		if (beam is Beam and beam.is_wide_head()) {
			return true
		}

		import "archgraph.tools.vert_merge" for VertMerge
		if (beam is VertMerge)
		{
			var outer = Blueprint.get_input_node(beam, "outer")
			if (outer is Beam and outer.is_wide_head()) {
				return true
			}

			var inner = Blueprint.get_input_node(beam, "inner")
			if (inner is Beam and inner.is_wide_head()) {
				return true
			}			
		}

		return false
	}

	static conn_gong_beam(gong, beam, pos)
	{
		import "archgraph.tools.dummy_hori" for DummyHori
		if (gong is DummyHori) {
			return
		}

		if (this.is_beam_wide_head(beam))
		{
			var CONN_JOINT = NODE_CACHE.fetch("../yingzao/00_dougong2/65_beam_bottom_joint.ves", nil)

			var n_gong = VariantProxy(gong.comp.v_geo)
			var n_beam = VariantProxy(beam.comp.v_geo)
			var n_pos  = VariantProxy(Variant(pos))

			Blueprint.connect(n_gong, "out", CONN_JOINT, "gong")
			Blueprint.connect(n_beam, "out", CONN_JOINT, "beam")
			Blueprint.connect(n_pos,  "out", CONN_JOINT, "pos")

			gong.comp.v_geo = Blueprint.calc_output_value(CONN_JOINT, "gong")
			beam.comp.v_geo = Blueprint.calc_output_value(CONN_JOINT, "beam")
		}
		else
		{
			var g2 = JointsNodes.conn2(gong.comp.v_geo, beam.comp.v_geo, pos, 0)
			gong.comp.v_geo = g2[0]
			beam.comp.v_geo = g2[1]
		}
	}

	static conn_beam_gong(beam, gong, pos)
	{
		import "archgraph.tools.dummy_hori" for DummyHori
		if (gong is DummyHori) {
			return
		}

		if (this.is_beam_wide_head(beam))
		{
			var CONN_JOINT = NODE_CACHE.fetch("../yingzao/00_dougong2/65_beam_top_joint.ves", nil)

			var n_beam = VariantProxy(beam.comp.v_geo)
			var n_gong = VariantProxy(gong.comp.v_geo)
			var n_pos  = VariantProxy(Variant(pos))

			Blueprint.connect(n_beam, "out", CONN_JOINT, "beam")
			Blueprint.connect(n_gong, "out", CONN_JOINT, "gong")
			Blueprint.connect(n_pos,  "out", CONN_JOINT, "pos")

			beam.comp.v_geo = Blueprint.calc_output_value(CONN_JOINT, "beam")
			gong.comp.v_geo = Blueprint.calc_output_value(CONN_JOINT, "gong")
		}
		else
		{
			var g2 = JointsNodes.conn2(beam.comp.v_geo, gong.comp.v_geo, pos, 0)
			beam.comp.v_geo = g2[0]
			gong.comp.v_geo = g2[1]
		}
	}

	static cut_geo_node(v_geo, cut_node, pos)
	{
		var CUT_BODY_JOINT = NODE_CACHE.fetch("../yingzao/00_dougong2/61_cut_body_joint.ves", nil)	

		var geo_node = VariantProxy(v_geo)
		var pos_node = VariantProxy(Variant(pos))

		Blueprint.connect(geo_node, "out", CUT_BODY_JOINT, "geo")
		Blueprint.connect(cut_node, get_geo_idx(cut_node), CUT_BODY_JOINT, "cut_body")		
		Blueprint.connect(pos_node, "out", CUT_BODY_JOINT, "pos")

		return Blueprint.calc_output_value(CUT_BODY_JOINT, "geo")
	}

	static cut_jao_hu_er(v_geo, pos, angle)
	{
		var JIAOHU_CUT  = NODE_CACHE.fetch("../yingzao/00_dougong2/20_jiaohu_cut_body.ves", nil)

		var cut_body = TransNodes.rotate(JIAOHU_CUT, angle)
		var n_cut_body  = VariantProxy(cut_body)

		return JointsNodes.cut_geo_node(v_geo, n_cut_body, pos)
	}

	static cut_jao_hu_er_outer(v_geo, pos, angle)
	{
		var JIAOHU_CUT  = NODE_CACHE.fetch("../yingzao/00_dougong2/20_jiaohu_outer_cut_body.ves", nil)

		var cut_body = TransNodes.rotate(JIAOHU_CUT, angle)
		var n_cut_body  = VariantProxy(cut_body)

		return JointsNodes.cut_geo_node(v_geo, n_cut_body, pos)
	}

	static cut_top_plane(v_geo, y)
	{
		var CUT = NODE_CACHE.fetch("../yingzao/00_dougong2/63_top_plane_cut.ves", nil)

		var geo_node = VariantProxy(v_geo)
		var y_node = VariantProxy(Variant(y))

		Blueprint.connect(geo_node, "out", CUT, "geo")
		Blueprint.connect(y_node, "out", CUT, "y")

		return Blueprint.calc_output_value(CUT, "geo")
	}

	static cut_bottom_plane(v_geo, y)
	{
		var CUT = NODE_CACHE.fetch("../yingzao/00_dougong2/63_bottom_plane_cut.ves", nil)

		var geo_node = VariantProxy(v_geo)
		var y_node = VariantProxy(Variant(y))

		Blueprint.connect(geo_node, "out", CUT, "geo")
		Blueprint.connect(y_node, "out", CUT, "y")

		return Blueprint.calc_output_value(CUT, "geo")
	}

	static cut_left_plane(v_geo, z)
	{
		var CUT = NODE_CACHE.fetch("../yingzao/00_dougong2/63_left_plane_cut.ves", nil)

		var geo_node = VariantProxy(v_geo)
		var z_node = VariantProxy(Variant(z))

		Blueprint.connect(geo_node, "out", CUT, "geo")
		Blueprint.connect(z_node, "out", CUT, "z")

		return Blueprint.calc_output_value(CUT, "geo")
	}

	static cut_right_plane(v_geo, z)
	{
		var CUT = NODE_CACHE.fetch("../yingzao/00_dougong2/63_right_plane_cut.ves", nil)

		var geo_node = VariantProxy(v_geo)
		var z_node = VariantProxy(Variant(z))

		Blueprint.connect(geo_node, "out", CUT, "geo")
		Blueprint.connect(z_node, "out", CUT, "z")

		return Blueprint.calc_output_value(CUT, "geo")
	}	

	static conn_tiaogan(v_geo, pos, slope)
	{
		var CONN = NODE_CACHE.fetch("../yingzao/00_dougong2/64_tiaogan_joint.ves", nil)

		var geo_node = VariantProxy(v_geo)
		var pos_node = VariantProxy(Variant(pos))
		var slope_node = VariantProxy(Variant(slope))

		Blueprint.connect(geo_node, "out", CONN, "geo")
		Blueprint.connect(pos_node, "out", CONN, "pos")
		Blueprint.connect(slope_node, "out", CONN, "slope")

		return Blueprint.calc_output_value(CONN, "geo")
	}

	static conn_beam(beam0, beam1, offset)
	{
		var CONN = NODE_CACHE.fetch("../yingzao/00_dougong2/65_beam_conn2.ves", nil)

		var geo0_node = VariantProxy(beam0.comp.v_geo)
		var geo1_node = VariantProxy(beam1.comp.v_geo)
		var pos_node  = VariantProxy(Variant(beam0.comp.pos))
		var offset_node = VariantProxy(Variant(offset))

		Blueprint.connect(geo0_node, "out", CONN, "geo0")
		Blueprint.connect(geo1_node, "out", CONN, "geo1")
		Blueprint.connect(pos_node, "out", CONN, "pos")
		Blueprint.connect(offset_node, "out", CONN, "offset")

		beam0.comp.v_geo = Blueprint.calc_output_value(CONN, "geo0")
		beam1.comp.v_geo = Blueprint.calc_output_value(CONN, "geo1")
	}	
}
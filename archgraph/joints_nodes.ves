import "blueprint.blueprint" for Blueprint
import "blueprint.variant_proxy" for VariantProxy
import "blueprint.variant" for Variant
import "archgraph.trans_nodes" for TransNodes
import "editor.node_cache" for NODE_CACHE
import "math" for Math

fun get_geo_idx(geo_node)
{
	if (geo_node is VariantProxy) {
		return 0
	} else {
		return "geo"
	}
}

class JointsNodes
{
	static conn2(v_geo0, v_geo1, pos, angle)
	{
		var CONN2_JOINT = NODE_CACHE.fetch("../yingzao/00_dougong2/62_conn_2_joint.ves", nil)

		var n_geo0  = VariantProxy(v_geo0)
		var n_geo1  = VariantProxy(v_geo1)
		var n_pos   = VariantProxy(Variant(pos))
		var n_angle = VariantProxy(Variant(angle))

		Blueprint.connect(n_geo0,  "out", CONN2_JOINT, "geo0")
		Blueprint.connect(n_geo1,  "out", CONN2_JOINT, "geo1")
		Blueprint.connect(n_pos,   "out", CONN2_JOINT, "pos")
		Blueprint.connect(n_angle, "out", CONN2_JOINT, "angle")

		return [ Blueprint.calc_output_value(CONN2_JOINT, "geo0"), Blueprint.calc_output_value(CONN2_JOINT, "geo1") ]
	}

	static conn3(v_geo0, v_geo1, v_geo2, pos, angle)
	{
		var CONN3_JOINT = NODE_CACHE.fetch("../yingzao/00_dougong2/62_conn_3_joint.ves", nil)

		var n_geo0 = VariantProxy(v_geo0)
		var n_geo1 = VariantProxy(v_geo1)
		var n_geo2 = VariantProxy(v_geo2)
		var n_pos  = VariantProxy(Variant(pos))
		var n_angle = VariantProxy(Variant(angle))

		Blueprint.connect(n_geo0,  "out", CONN3_JOINT, "geo0")
		Blueprint.connect(n_geo1,  "out", CONN3_JOINT, "geo1")
		Blueprint.connect(n_geo2,  "out", CONN3_JOINT, "geo2")
		Blueprint.connect(n_pos,   "out", CONN3_JOINT, "pos")
		Blueprint.connect(n_angle, "out", CONN3_JOINT, "angle")

		return [ Blueprint.calc_output_value(CONN3_JOINT, "geo0"), Blueprint.calc_output_value(CONN3_JOINT, "geo1"), Blueprint.calc_output_value(CONN3_JOINT, "geo2") ]
	}

	static cut_geo_node(v_geo, cut_node, pos)
	{
		var CUT_BODY_JOINT = NODE_CACHE.fetch("../yingzao/00_dougong2/61_cut_body_joint.ves", nil)	

		var geo_node = VariantProxy(v_geo)
		var pos_node = VariantProxy(Variant(pos))

		Blueprint.connect(geo_node, "out", CUT_BODY_JOINT, "geo")
		Blueprint.connect(cut_node, get_geo_idx(cut_node), CUT_BODY_JOINT, "cut_body")		
		Blueprint.connect(pos_node, "out", CUT_BODY_JOINT, "pos")

		return Blueprint.calc_output_value(CUT_BODY_JOINT, "geo")
	}

	static cut_jao_hu_er(v_geo, pos, angle)
	{
		var JIAOHU_CUT  = NODE_CACHE.fetch("../yingzao/00_dougong2/20_jiaohu_cut_body.ves", nil)

		var cut_body = TransNodes.rotate(JIAOHU_CUT, angle)
		var n_cut_body  = VariantProxy(cut_body)

		return JointsNodes.cut_geo_node(v_geo, n_cut_body, pos)
	}

	static cut_top_planne(v_geo, y)
	{
		var CUT = NODE_CACHE.fetch("../yingzao/00_dougong2/63_top_plane_cut.ves", nil)

		var geo_node = VariantProxy(v_geo)
		var y_node = VariantProxy(Variant(y))

		Blueprint.connect(geo_node, "out", CUT, "geo")
		Blueprint.connect(y_node, "out", CUT, "y")

		return Blueprint.calc_output_value(CUT, "geo")
	}

	static cut_left_plane(v_geo, z)
	{
		var CUT = NODE_CACHE.fetch("../yingzao/00_dougong2/63_left_plane_cut.ves", nil)

		var geo_node = VariantProxy(v_geo)
		var z_node = VariantProxy(Variant(z))

		Blueprint.connect(geo_node, "out", CUT, "geo")
		Blueprint.connect(z_node, "out", CUT, "z")

		return Blueprint.calc_output_value(CUT, "geo")
	}

	static cut_right_plane(v_geo, z)
	{
		var CUT = NODE_CACHE.fetch("../yingzao/00_dougong2/63_right_plane_cut.ves", nil)

		var geo_node = VariantProxy(v_geo)
		var z_node = VariantProxy(Variant(z))

		Blueprint.connect(geo_node, "out", CUT, "geo")
		Blueprint.connect(z_node, "out", CUT, "z")

		return Blueprint.calc_output_value(CUT, "geo")
	}	

	static conn_tiaogan(v_geo, pos, slope)
	{
		var CONN = NODE_CACHE.fetch("../yingzao/00_dougong2/64_tiaogan_joint.ves", nil)

		var geo_node = VariantProxy(v_geo)
		var pos_node = VariantProxy(Variant(pos))
		var slope_node = VariantProxy(Variant(slope))

		Blueprint.connect(geo_node, "out", CONN, "geo")
		Blueprint.connect(pos_node, "out", CONN, "pos")
		Blueprint.connect(slope_node, "out", CONN, "slope")

		return Blueprint.calc_output_value(CONN, "geo")
	}
}
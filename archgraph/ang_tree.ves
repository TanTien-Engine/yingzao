import "blueprint.blueprint" for Blueprint
import "blueprint.variant_proxy" for VariantProxy
import "archgraph.nodes.ang_proxy" for AngProxy
import "archgraph.nodes.hori_gong" for HoriGong
import "archgraph.nodes.fang" for Fang
import "archgraph.nodes.ya_cao_fang" for YaCaoFang
import "archgraph.nodes.liao_yan_fang" for LiaoYanFang
import "archgraph.gen_nodes" for GenNodes
import "archgraph.trans_nodes" for TransNodes
import "archgraph.constant" for ZU_CAI_HEIGHT
import "archgraph.dou_helper" for DouHelper
import "archgraph.joints_nodes" for JointsNodes
import "maths.vector" for Vector2, Vector3
import "editor.node_cache" for NODE_CACHE
import "math" for Math

class AngTree
{
	init(ang, pos)
	{
		this.begin_layer = ang.comp.y_idx
		this.root = AngProxy(pos)

		var prev = this.root
		var next = Blueprint.get_output_node(ang, "outer")

		while (next)
		{
			var n = nil
			if (next is HoriGong) {
				n = HoriGong()
			} else if (next is Fang) {
				n = Fang()
			} else if (next is LiaoYanFang) {
				n = LiaoYanFang()				
			} else {
				import "logger.logger" for Logger
				Logger.error("Unknown node %(next)")
			}

			Blueprint.connect(prev, 0, n, 0)

			prev = n
			next = Blueprint.get_output_node(next, 0)
		}

		this.layers = []
	}

	rebuild_layers()
	{
		this.layers.clear()

		if (!this.root) {
			return
		}

		var curr = this.root
		while (curr) {
			this.layers.add(curr)
			curr = Blueprint.get_output_node(curr, 0)
		}
	}	

	get_result_geo(dg, out_list)
	{
		for (var i in 0 .. this.layers.count)
		{
			var src = this.layers[i]
			var dst = out_list[this.begin_layer + i]

			if (src is AngProxy)
			{
				var ANG = NODE_CACHE.fetch("../yingzao/00_dougong2/37_ang.ves", nil)
				var v_ang = TransNodes.translate(ANG, Vector3(0, 0, 0))

				var dist = src.ang_pos.z / 1.414
				v_ang = GenNodes.corner_gen_2(v_ang, Vector3(src.ang_pos.x, src.ang_pos.y, 0), dist)

				var top_y = nil
				for (var item in dg.layers[this.begin_layer + i + 2]) {
					if (item.comp.x_idx == 0 and (item is Fang or item is YaCaoFang)) {
						top_y = item.comp.pos.y
					}
				}
				if (top_y) {
					v_ang = JointsNodes.cut_top_planne(v_ang, top_y)
				}

				dst.value.add(v_ang)
			}
			else
			{
				var gong = nil
				if (src is Fang) {
					gong = NODE_CACHE.fetch("../yingzao/00_dougong2/13_fang.ves", nil)
				} else if (src is HoriGong) {
					gong = src.select_gong(nil)
				} else if (src is LiaoYanFang) {
					gong = NODE_CACHE.fetch("../yingzao/00_dougong2/41_liaoyan_fang.ves", nil)
				} else {
					import "logger.logger" for Logger
					Logger.error("Unknown node %(src)")
				}

				if (i != this.layers.count - 1) {
					gong = VariantProxy(DouHelper.add_dou(Blueprint.calc_output_value(gong, 0)))				
				}

				var pos = this.root.ang_pos
				var y = pos.y + (i - 1) * ZU_CAI_HEIGHT

				var pos0 = Vector2(pos.x, pos.z / 1.414).rotated(- Math.pi() / 4)
				var pos1 = Vector2(pos.x, pos.z / 1.414).rotated(Math.pi() / 4)

				dst.value.add(TransNodes.transform(gong, Vector3(pos0.x, y, pos0.y), Math.pi() * 0.25))
				dst.value.add(TransNodes.transform(gong, Vector3(pos1.x, y, pos1.y), -Math.pi() * 0.25))
			}
		}
	}
}
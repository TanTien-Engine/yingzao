import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "editor.node_cache" for NODE_CACHE
import "archgraph.variant" for PIN_TYPE_INNER_GONG, PIN_TYPE_FANG
import "archgraph.constant" for CAI_HEIGHT, ZU_CAI_HEIGHT
import "archgraph.geo_helper" for GeoHelper
import "archgraph.node_helper" for NodeHelper
import "archgraph.component" for Component
import "archgraph.nodes.dou" for SAN_DOU
import "geograph.nodes.brush_get_size" for BrushGetSize
import "maths.vector" for Vector3

var NI_DAO_GONG     = NODE_CACHE.fetch("C:/projects/yingzao/00_dougong2/31_nidao_gong.ves", nil)
var BI_NEI_MAN_GONG = NODE_CACHE.fetch("C:/projects/yingzao/00_dougong2/33_man_gong.ves", nil)

var GD_SUN = NODE_CACHE.fetch("C:/projects/yingzao/00_dougong2/10_gd_sun.ves", nil)

var JIAOHU_CUT = NODE_CACHE.fetch("C:/projects/yingzao/00_dougong2/20_jiaohu_tu_cut_body.ves", nil)
var QIXIN_CUT  = NODE_CACHE.fetch("C:/projects/yingzao/00_dougong2/20_qixin_cut_body.ves", nil)

class InnerGong is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "prev", PIN_TYPE_INNER_GONG),
		]
		this.exports = [
			Pin(this, "next", PIN_TYPE_INNER_GONG),
		]

		this.layout()

		this.comp = Component()

		this.gong = nil
	}	

	calc_value(idx)
	{
		var pos = NodeHelper.calc_curr_pos(this, 0)
		return Variant(pos.add(Vector3(0, ZU_CAI_HEIGHT, 0)))
	}

	resolve(dg)
	{
		// select gong
		this.gong = this.select_gong()
		if (this.gong == BI_NEI_MAN_GONG) {
			this.exports[0].type = PIN_TYPE_FANG
		}

		// translate
		var pos = NodeHelper.calc_curr_pos(this, 0)
		var v_geo = GeoHelper.translate_geo(this.gong, pos)

		// conn prev
//		v_geo = this.add_joint(v_geo, prev, pos)

		// conn next
		v_geo = this.add_dou(v_geo, pos)

		this.comp.pos = pos
		this.comp.v_geo = v_geo

		// corner
		{
			var v_geo = Blueprint.calc_output_value(this.gong, 0)
			v_geo = this.add_dou(v_geo, Vector3(0, 0, 0))
			this.comp.v_geo_c = GeoHelper.corner_gen_2(v_geo, pos)		
		}
	}

	select_gong()
	{
		var prev = Blueprint.get_input_node(this, 0)
		if (prev and prev is InnerGong) {
			return BI_NEI_MAN_GONG
		} else {
			return NI_DAO_GONG
		}
	}

	add_joint(v_geo, prev, pos)
	{
		var cut_node = nil
		if (prev and prev is InnerGong) {
			cut_node = QIXIN_CUT
		} else {
			cut_node = JIAOHU_CUT
		}

		return GeoHelper.joint_cut_geo(v_geo, cut_node, pos)
	}

	add_dou(v_geo, pos)
	{
		var next = Blueprint.get_output_node(this, 0)
		if (!next) {
			return v_geo
		}

		var aabb = []
		BrushGetSize.calc_aabb(v_geo, aabb)
		var x_min = aabb[0].x
		var x_max = aabb[1].x

		var dist = 0.05
		var l_pos = Vector3(x_min + dist, pos.y + CAI_HEIGHT, pos.z)
		var r_pos = Vector3(x_max - dist, pos.y + CAI_HEIGHT, pos.z)

		var l_sun = GeoHelper.translate_geo(GD_SUN, l_pos)
		var r_sun = GeoHelper.translate_geo(GD_SUN, r_pos)

		var l_dou = GeoHelper.translate_geo(SAN_DOU, l_pos)
		var r_dou = GeoHelper.translate_geo(SAN_DOU, r_pos)

		// cut sun
		l_dou = GeoHelper.joint_cut_geo(l_dou, SUN_GD, l_pos)
		r_dou = GeoHelper.joint_cut_geo(r_dou, SUN_GD, r_pos)

		v_geo = GeoHelper.joint_cut_geo(v_geo, GD_SUN, [ l_pos, r_pos ])

		return Variant([ v_geo, [ l_sun, r_sun ], [ l_dou, r_dou ] ])
	}

	get_title()
	{
		if (this.gong == NI_DAO_GONG) {
			return "泥道栱"
		} else {
			return "壁内慢栱"
		}
	}	
}
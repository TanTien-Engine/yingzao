import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant
import "archgraph.constant" for CAI_HEIGHT, ZU_CAI_HEIGHT
import "archgraph.variant" for PIN_TYPE_VERT_GONG, PIN_TYPE_HORI_GONG
import "archgraph.component" for Component
import "archgraph.geo_helper" for GeoHelper
import "archgraph.node_helper" for NodeHelper
import "archgraph.nodes.dou" for SAN_DOU, JIAOHU_DOU
import "archgraph.context" for CONTEXT
import "maths.vector" for Vector3
import "editor.node_cache" for NODE_CACHE
import "math" for Math

var DOU_HALF_LEN = 0.06

class VertGong is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "prev", PIN_TYPE_VERT_GONG),
		]
		this.exports = [
			Pin(this, "next",  PIN_TYPE_VERT_GONG),
			Pin(this, "outer", PIN_TYPE_HORI_GONG),
			Pin(this, "inner", PIN_TYPE_HORI_GONG),			
		]

		this.layout()

		this.comp = Component()

		this.outer_hop = 0
		this.inner_hop = 0

		this.less_step = true
	}

	calc_value(idx)
	{
		var z = 0
		if (idx == 0) {
			z = 0
		} else if (idx == 1) {
			z = this.calc_outer_step_len()
		} else if (idx == 2) {
			z = - this.calc_inner_step_len()
		}
		var pos = NodeHelper.calc_curr_pos(this, 0)
		return Variant(pos.add(Vector3(0, ZU_CAI_HEIGHT, z)))
	}

	calc_outer_step_len()
	{
		return VertGong.calc_tot_step_len(this.outer_hop, this.less_step)
	}

	calc_inner_step_len()
	{
		return VertGong.calc_tot_step_len(-this.inner_hop, this.less_step)
	}

	static calc_tot_step_len(hop, less_step)
	{
		var len = 0

		if (hop > 0) {
			for (var i in 1 .. hop + 1) {
				len = len + CONTEXT.step_len_func(i, less_step)
			}
		} else {
			for (var i in 1 .. -hop + 1) {
				len = len + CONTEXT.step_len_func(-i, less_step)
			}
		}

		return len
	}

	add_dou(v_geo, pos)
	{
		var GD_SUN = NODE_CACHE.fetch("C:/projects/yingzao/00_dougong2/10_gd_sun.ves", nil)

		var len_l = this.calc_outer_step_len()
		var len_r = this.calc_inner_step_len()
		var l_pos = Vector3(pos.x, pos.y + CAI_HEIGHT,  len_l)
		var r_pos = Vector3(pos.x, pos.y + CAI_HEIGHT, -len_r)

		var l_sun = GeoHelper.translate_geo(GD_SUN, l_pos)
		var r_sun = GeoHelper.translate_geo(GD_SUN, r_pos)

		var next_v = Blueprint.get_output_node(this, 0)
		var next_o = Blueprint.get_output_node(this, 1)
		var next_i = Blueprint.get_output_node(this, 2)

		var l_dou = this.gen_dou(next_v, next_o, l_pos)
		var r_dou = this.gen_dou(next_v, next_i, r_pos)

		// cut sun
//		l_dou = GeoHelper.joint_cut_geo(l_dou, l_dou_node, l_pos)		
//		r_dou = GeoHelper.joint_cut_geo(r_dou, r_dou_node, r_pos)		

		v_geo = GeoHelper.joint_cut_geo(v_geo, GD_SUN, [ l_pos, r_pos ])

		return Variant([ v_geo, [ l_sun, r_sun ], [ l_dou, r_dou ] ])
	}

	gen_dou(vert, hori, pos)
	{
		if (vert and hori) {
			return GeoHelper.translate_geo(JIAOHU_DOU, pos)
		} else if (vert) {
			return GeoHelper.transform_geo(SAN_DOU, pos, Math.pi() * 0.5)
		} else if (hori) {
			return GeoHelper.translate_geo(SAN_DOU, pos)
		} else {
//			return nil
			return GeoHelper.translate_geo(SAN_DOU, pos)
		}
	}
}
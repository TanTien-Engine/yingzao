import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "editor.node_cache" for NODE_CACHE
import "archgraph.variant" for PIN_TYPE_BI_GONG
import "archgraph.node_helper" for NodeHelper
import "archgraph.nodes.dou" for SAN_DOU, QIXIN_DOU
import "geograph.nodes.brush_get_size" for BrushGetSize
import "maths.vector" for Vector3

var NI_DAO_GONG     = NODE_CACHE.fetch("C:/projects/yingzao/00_dougong2/31_nidao_gong.ves", nil)
var BI_NEI_MAN_GONG = NODE_CACHE.fetch("C:/projects/yingzao/00_dougong2/33_man_gong.ves", nil)
var ZHU_TOU_FANG    = NODE_CACHE.fetch("C:/projects/yingzao/00_dougong2/13_fang.ves", nil)

var SUN_GD = NODE_CACHE.fetch("C:/projects/yingzao/00_dougong2/60_sun_gd.ves", nil)

var JIAOHU_CUT = NODE_CACHE.fetch("C:/projects/yingzao/00_dougong2/20_jiaohu_tu_cut_body.ves", nil)
var QIXIN_CUT  = NODE_CACHE.fetch("C:/projects/yingzao/00_dougong2/20_qixin_cut_body.ves", nil)

class BiGong is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "prev", PIN_TYPE_BI_GONG),
		]
		this.exports = [
			Pin(this, "next", PIN_TYPE_BI_GONG),
		]

		this.layout()

		this.next_pos = nil

		this.gong_layer = 0
	}

	resolve()
	{
		// select gong
		var prev = Blueprint.get_input_node(this, 0)
		var gong = this.select_gong(prev)

		// translate
		var curr_pos = Vector3(0, 0, 0)
		if (prev) {
			curr_pos = prev.next_pos
		}			
		this.next_pos = curr_pos.add(Blueprint.calc_output_value(gong, "pos").value)
		var geo = NodeHelper.translate_geo(gong, curr_pos)

		// conn prev
//		geo = this.add_joint(geo, prev)

		// conn next
		geo = this.add_dou(geo)

		return geo
	}

	select_gong(prev)
	{
		if (prev and prev is BiGong) {
			this.gong_layer = prev.gong_layer + 1
		}

		if (this.gong_layer == 0) {
			this.title = "泥道栱"
			return NI_DAO_GONG
		} else if (this.gong_layer == 1) {
			this.title = "壁内慢栱"
			return BI_NEI_MAN_GONG
		} else {
			this.title = "柱头枋"		
			return ZHU_TOU_FANG
		}
	}

	add_joint(geo, prev)
	{
		var cut_node = nil
		if (prev and prev is BiGong) {
			cut_node = QIXIN_CUT
		} else {
			cut_node = JIAOHU_CUT
		}

		return NodeHelper.joint_cut_geo(geo, cut_node, prev.next_pos)
	}

	add_dou(geo)
	{
		var next = Blueprint.get_output_node(this, 0)
		if (!next) {
			return geo
		}

		var l_pos = nil
		var r_pos = nil
		if (this.gong_layer < 2)
		{
			var aabb = []
			BrushGetSize.calc_aabb(geo, aabb)
			var x_min = aabb[0].x
			var x_max = aabb[1].x

			var dist = 0.05
			l_pos = Vector3(x_min + dist, this.next_pos.y, this.next_pos.z)
			r_pos = Vector3(x_max - dist, this.next_pos.y, this.next_pos.z)
		}
		else
		{
			l_pos = Vector3(-0.41, this.next_pos.y, this.next_pos.z)
			r_pos = Vector3( 0.41, this.next_pos.y, this.next_pos.z)
		}

		var l_sun = NodeHelper.translate_geo(SUN_GD, l_pos)
		var r_sun = NodeHelper.translate_geo(SUN_GD, r_pos)

		var l_dou = NodeHelper.translate_geo(SAN_DOU, l_pos)
		var r_dou = NodeHelper.translate_geo(SAN_DOU, r_pos)

		this.next_pos = this.next_pos.add(Vector3(0, 0.06, 0))

		// cut sun
		l_dou = NodeHelper.joint_cut_geo(l_dou, SUN_GD, l_pos)
		r_dou = NodeHelper.joint_cut_geo(r_dou, SUN_GD, r_pos)

		geo = NodeHelper.joint_cut_geo(geo, SUN_GD, [ l_pos, r_pos ])

		return Variant(VAR_TYPE_ARRAY, [ geo, [ l_sun, r_sun ], [ l_dou, r_dou ] ])
	}

	get_title()
	{
		return this.title
	}
}
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant
import "blueprint.variant_proxy" for VariantProxy
import "archgraph.geo_helper" for GeoHelper
import "archgraph.node_helper" for NodeHelper
import "archgraph.nodes.vert_gong" for VertGong
import "archgraph.nodes.lu_dou" for LuDou
import "editor.node_cache" for NODE_CACHE

class HuaGong is VertGong
{
	resolve(dg)
	{
		// select gong
		var prev = Blueprint.get_input_node(this, 0)
		if (prev is LuDou) {
			this.outer_hop = 1
			this.inner_hop = 1
		} else if (prev) {
			this.outer_hop = prev.outer_hop + 1
			this.inner_hop = prev.inner_hop + 1			
		} else {
			this.outer_hop = 1
			this.inner_hop = 1
		}

		var pos = NodeHelper.calc_curr_pos(this, 0)
		var v_geo = HuaGong.create_geo(this.outer_hop, this.inner_hop, pos)

		// conn next
		v_geo = this.add_dou(v_geo, pos)

		this.comp.pos = pos
		this.comp.v_geo = v_geo
		this.comp.v_geo_c = v_geo
	}

	get_title()
	{
		return "%(this.outer_hop)跳华栱"
	}

	static create_geo(outer_hop, inner_hop, pos)
	{
		var HUA_GONG = NODE_CACHE.fetch("C:/projects/yingzao/00_dougong2/35_hua_gong.ves", nil)

		var len_l = VertGong.calc_tot_step_len(outer_hop, this.less_step) + VertGong.get_dou_half_len()
		var len_r = VertGong.calc_tot_step_len(-inner_hop, this.less_step) + VertGong.get_dou_half_len()
		var len_l_node = VariantProxy(Variant(len_l))
		var len_r_node = VariantProxy(Variant(len_r))
		Blueprint.connect(len_l_node, 0, HUA_GONG, "len_left")
		Blueprint.connect(len_r_node, 0, HUA_GONG, "len_right")

		return GeoHelper.translate_geo(HUA_GONG, pos)
	}
}
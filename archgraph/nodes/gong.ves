import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "editor.node_cache" for NODE_CACHE
import "archgraph.variant" for PIN_TYPE_GONG2GONG, PIN_TYPE_DOU2GONG, PIN_TYPE_GONG2FANG
import "archgraph.node_helper" for NodeHelper
import "archgraph.nodes.dou" for SAN_DOU, QIXIN_DOU
import "geograph.nodes.brush_get_size" for BrushGetSize
import "maths.vector" for Vector3

var GUAZI_GONG = NODE_CACHE.fetch("C:/projects/yingzao/00_dougong2/32_guazi_gong.ves", nil)
var MAN_GONG   = NODE_CACHE.fetch("C:/projects/yingzao/00_dougong2/33_man_gong.ves", nil)
var LING_GONG  = NODE_CACHE.fetch("C:/projects/yingzao/00_dougong2/34_ling_gong.ves", nil)

var SUN_GD = NODE_CACHE.fetch("C:/projects/yingzao/00_dougong2/60_sun_gd.ves", nil)

var JIAOHU_CUT = NODE_CACHE.fetch("C:/projects/yingzao/00_dougong2/20_jiaohu_tu_cut_body.ves", nil)
var QIXIN_CUT  = NODE_CACHE.fetch("C:/projects/yingzao/00_dougong2/20_qixin_cut_body.ves", nil)

class Gong is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "prev", [ PIN_TYPE_GONG2GONG, PIN_TYPE_DOU2GONG ]),
		]
		this.exports = [
			Pin(this, "next", [ PIN_TYPE_GONG2GONG, PIN_TYPE_GONG2FANG ]),
		]

		this.layout()

		this.next_pos = nil
	}

	resolve()
	{
		// select gong
		var prev = Blueprint.get_input_node(this, 0)
		var gong = this.select_gong(prev)

		// translate
		var curr_pos = Vector3(0, 0, 0)
		if (prev) {
			curr_pos = prev.next_pos
		}		
		this.next_pos = curr_pos.add(Blueprint.calc_output_value(gong, "pos").value)
		var geo = NodeHelper.translate_geo(gong, curr_pos)

		// conn prev
		geo = this.add_joint(geo, prev)

		// conn next
		geo = this.add_dou(geo)

		return geo
	}

	select_gong(prev)
	{
		if (prev and prev is Gong) {
			return MAN_GONG
		} else {
			return GUAZI_GONG
		}
	}

	add_joint(geo, prev)
	{
		var cut_node = nil
		if (prev and prev is Gong) {
			cut_node = QIXIN_CUT
		} else {
			cut_node = JIAOHU_CUT
		}

		return NodeHelper.joint_cut_geo(geo, cut_node, prev.next_pos)
	}

	add_dou(geo)
	{
		var next = Blueprint.get_output_node(this, 0)
		if (!next) {
			return geo
		}

		var c_pos = this.next_pos.clone()

		var c_sun = NodeHelper.translate_geo(SUN_GD, c_pos)
		var c_dou = NodeHelper.translate_geo(QIXIN_DOU, c_pos)

		var aabb = []
		BrushGetSize.calc_aabb(geo, aabb)
		var x_min = aabb[0].x
		var x_max = aabb[1].x

		var dist = 0.05
		var l_pos = Vector3(x_min + dist, this.next_pos.y, this.next_pos.z)
		var r_pos = Vector3(x_max - dist, this.next_pos.y, this.next_pos.z)

		var l_sun = NodeHelper.translate_geo(SUN_GD, l_pos)
		var r_sun = NodeHelper.translate_geo(SUN_GD, r_pos)

		var l_dou = NodeHelper.translate_geo(SAN_DOU, l_pos)
		var r_dou = NodeHelper.translate_geo(SAN_DOU, r_pos)

		this.next_pos = this.next_pos.add(Vector3(0, 0.06, 0))

		// cut sun
		l_dou = NodeHelper.joint_cut_geo(l_dou, SUN_GD, l_pos)
		c_dou = NodeHelper.joint_cut_geo(c_dou, SUN_GD, c_pos)
		r_dou = NodeHelper.joint_cut_geo(r_dou, SUN_GD, r_pos)		
		geo = NodeHelper.joint_cut_geo(geo, SUN_GD, [ l_pos, c_pos, r_pos ])

		return Variant(VAR_TYPE_ARRAY, [ geo, [ l_sun, c_sun, r_sun ], [ l_dou, c_dou, r_dou ] ])
	}
}
import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "archgraph.variant" for PIN_TYPE_FANG, PIN_TYPE_HORI_GONG, PIN_TYPE_INNER_GONG
import "archgraph.geo_helper" for GeoHelper
import "archgraph.node_helper" for NodeHelper
import "archgraph.constant" for ZU_CAI_HEIGHT, CAI_HEIGHT
import "archgraph.component" for Component
import "archgraph.nodes.dou" for SAN_DOU, QIXIN_DOU
import "editor.node_cache" for NODE_CACHE
import "maths.vector" for Vector3

class Fang is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "prev", [ PIN_TYPE_FANG, PIN_TYPE_HORI_GONG, PIN_TYPE_INNER_GONG ]),
		]
		this.exports = [
			Pin(this, "next", [ PIN_TYPE_FANG ]),
		]

		this.layout()

		this.comp = Component()
	}

	calc_value(idx)
	{
		var pos = NodeHelper.calc_curr_pos(this, 0)
		return Variant(pos.add(Vector3(0, ZU_CAI_HEIGHT, 0)))
	}

	resolve(dg)
	{
		if (this.comp.x_idx == 0) {
			this.exports[0].type.add(PIN_TYPE_INNER_GONG)
		} else {
			this.exports[0].type.add(PIN_TYPE_HORI_GONG)
		}

		var FANG = NODE_CACHE.fetch("C:/projects/yingzao/00_dougong2/13_fang.ves", nil)

		var pos = NodeHelper.calc_curr_pos(this, 0)

		var v_geo = GeoHelper.translate_geo(FANG, pos)

		// conn prev
		v_geo = this.add_joint(dg, v_geo, pos)

		// conn next
		v_geo = this.add_dou(dg, v_geo, pos)

		this.comp.pos = pos
		this.comp.v_geo = v_geo
	}

	add_joint(dg, v_geo, pos)
	{
		var QIXIN_CUT  = NODE_CACHE.fetch("C:/projects/yingzao/00_dougong2/20_qixin_cut_body.ves", nil)

		var has_c = !dg.has_vert_gong(this.comp.y_idx - 1)
		if (has_c) {
			return GeoHelper.joint_cut_geo(v_geo, QIXIN_CUT, pos)		
		} else {
			return v_geo
		}
	}

	add_dou(dg, v_geo, pos)
	{
		var GD_SUN = NODE_CACHE.fetch("C:/projects/yingzao/00_dougong2/10_gd_sun.ves", nil)

		var next = Blueprint.get_output_node(this, 0)
		if (!next) {
			return v_geo
		}

		import "archgraph.nodes.ya_cao_fang" for YaCaoFang
		if (next is YaCaoFang) {
			return v_geo
		}

		var l_pos = Vector3(-0.41, pos.y + CAI_HEIGHT, pos.z)
		var r_pos = Vector3( 0.41, pos.y + CAI_HEIGHT, pos.z)

		var l_sun = GeoHelper.translate_geo(GD_SUN, l_pos)
		var r_sun = GeoHelper.translate_geo(GD_SUN, r_pos)

		var l_dou = GeoHelper.translate_geo(SAN_DOU, l_pos)
		var r_dou = GeoHelper.translate_geo(SAN_DOU, r_pos)

		// cut sun
		l_dou = GeoHelper.joint_cut_geo(l_dou, SUN_GD, l_pos)
		r_dou = GeoHelper.joint_cut_geo(r_dou, SUN_GD, r_pos)

		var has_c = !dg.has_vert_gong(this.comp.y_idx)
		if (has_c)
		{
			var c_pos = pos.add(Vector3(0, CAI_HEIGHT, 0))

			var c_sun = GeoHelper.translate_geo(GD_SUN, c_pos)
			var c_dou = GeoHelper.translate_geo(QIXIN_DOU, c_pos)

			c_dou = GeoHelper.joint_cut_geo(c_dou, SUN_GD, c_pos)

			v_geo = GeoHelper.joint_cut_geo(v_geo, GD_SUN, [ l_pos, c_pos, r_pos ])

			return Variant([ v_geo, [ l_sun, c_sun, r_sun ], [ l_dou, c_dou, r_dou ] ])
		}
		else
		{
			v_geo = GeoHelper.joint_cut_geo(v_geo, GD_SUN, [ l_pos, r_pos ])

			return Variant([ v_geo, [ l_sun, r_sun ], [ l_dou, r_dou ] ])
		}
	}

	get_title()
	{
		if (this.comp.x_idx == 0) {
			return "柱头方"
		} else {
			return "罗汉方"		
		}
	}
}
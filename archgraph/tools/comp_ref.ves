import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant
import "blueprint.node_param" for NodeParam
import "archgraph.variant" for VarComp, VAR_TYPE_COMPONENT
import "archgraph.context" for CONTEXT

class CompRef is Node
{
	init()
	{
		super.init()

		this.exports = [
			Pin(this, "comp", VAR_TYPE_COMPONENT),
		]

		this.params.add(NodeParam("y", 0, { "integer" : true, "min" : 0, "max" : 10 }))
		this.params.add(NodeParam("x", 0, { "integer" : true, "min" : 0, "max" : 10 }))

		this.layout()
	}

	calc_value(idx)
	{
		import "archgraph.tools.vert_split" for VertSplit

		if (!CONTEXT.dg) {
			return nil
		}

		var y = this.query_param("y").value
		var x = this.query_param("x").value

		if (y >= CONTEXT.dg.layers.count or x >= CONTEXT.dg.layers[y].count) {
			return nil
		}

		var node = CONTEXT.dg.layers[y][x]
		if (node is List) 
		{
			if (node.isEmpty) {
				node = nil
			} else if (node[0] is VertSplit) {
				node = Blueprint.get_output_node(node[0], "outer")
				if (!node) {
					node = Blueprint.get_output_node(node[0], "inner")
				}
			} else {
				node = node[0]
			}
		}

		if (node) {
			return Variant(VAR_TYPE_COMPONENT, VarComp(node.comp))
		} else {
			return nil
		}
	}
}
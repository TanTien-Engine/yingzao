import "blueprint.variant" for Variant
import "geograph.nodes.brush_get_size" for BrushGetSize
import "archgraph.constant" for DOU_H_WIDTH
import "archgraph.trans_nodes" for TransNodes
import "archgraph.nodes.dou" for SAN_DOU, QIXIN_DOU
import "archgraph.joints_nodes" for JointsNodes
import "archgraph.constant" for CAI_HEIGHT
import "editor.node_cache" for NODE_CACHE
import "maths.vector" for Vector3

class DouHelper
{
	// hori gong
	static calc_dou_pos_x(gong_geo)
	{
		var aabb = []
		BrushGetSize.calc_aabb(gong_geo, aabb)

		var x_min = aabb[0].x
		var x_max = aabb[1].x

		return [ x_min + DOU_H_WIDTH, x_max - DOU_H_WIDTH ]
	}

	static add_dou(gong_geo)
	{
		var GD_SUN = NODE_CACHE.fetch("../yingzao/00_dougong2/10_gd_sun.ves", nil)

		var dou_pos_x = DouHelper.calc_dou_pos_x(gong_geo)

		var x_min = dou_pos_x[0]
		var x_max = dou_pos_x[1]
		if (x_min < -0.99) {
			x_min = -0.41
		}
		if (x_max > 0.99) {
			x_max = 0.41
		}

		var l_pos = Vector3(x_min, CAI_HEIGHT, 0)
		var r_pos = Vector3(x_max, CAI_HEIGHT, 0)

		var l_sun = TransNodes.translate(GD_SUN, l_pos)
		var r_sun = TransNodes.translate(GD_SUN, r_pos)

		var l_dou = TransNodes.translate(SAN_DOU, l_pos)
		var r_dou = TransNodes.translate(SAN_DOU, r_pos)

		var c_pos = Vector3(0, CAI_HEIGHT, 0)

		var c_sun = TransNodes.translate(GD_SUN, c_pos)
		var c_dou = TransNodes.translate(QIXIN_DOU, c_pos)

		gong_geo = JointsNodes.cut_geo_node(gong_geo, GD_SUN, [ l_pos, c_pos, r_pos ])

		return Variant([ gong_geo, [ l_sun, c_sun, r_sun ], [ l_dou, c_dou, r_dou ] ])
	}
}
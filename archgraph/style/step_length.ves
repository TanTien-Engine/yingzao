import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER, VAR_TYPE_INTEGER
import "blueprint.node_param" for NodeParam
import "archgraph.context" for CONTEXT

var DEFAULT_STEP_LEN = 0.3

class StepLength is Node
{
	init()
	{
		super.init()

		this.exports = [
			Pin(this, "step_len", VAR_TYPE_NUMBER),
		]

		this.params.add(NodeParam("outer", [ 0.3, 0.3, 0.3, 0.3, 0.3 ]))
		this.params.add(NodeParam("inner", [ 0.3, 0.3, 0.3, 0.3, 0.3 ]))

		this.layout()
	}

	calc_value(idx)
	{
		var v_idx = Blueprint.calc_input_value(this, "prev")
		if (!v_idx) {
			return Variant(DEFAULT_STEP_LEN)
		} else {
			return Variant(this.calc_step_len(v_idx.value))
		}
	}

	on_node_dirty()
	{
		CONTEXT.style_changed = true
	}

	calc_step_len(step_idx)
	{
		if (step_idx == 0) {
			return DEFAULT_STEP_LEN
		}

		var i = step_idx
		if (i > 0)
		{
			var outer = this.query_param("outer").value
			var idx = i - 1
			if (!outer or idx >= outer.count) {
				return DEFAULT_STEP_LEN
			} else {
				return outer[idx]
			}
		}
		else
		{
			var inner = this.query_param("inner").value
			var idx = -i - 1
			if (!inner or idx >= inner.count) {
				return DEFAULT_STEP_LEN
			} else {
				return inner[idx]
			}
		}
	}
}
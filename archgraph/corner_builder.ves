import "blueprint.blueprint" for Blueprint
import "blueprint.variant_proxy" for VariantProxy
import "blueprint.variant" for Variant
import "archgraph.gen_nodes" for GenNodes
import "archgraph.trans_nodes" for TransNodes
import "archgraph.dou_helper" for DouHelper
import "archgraph.constant" for CAI_HEIGHT, ZU_CAI_HEIGHT
import "archgraph.joints_nodes" for JointsNodes
import "archgraph.ang_helper" for AngHelper
import "archgraph.gong_helper" for GongHelper, VERT_POS_INNER
import "editor.node_cache" for NODE_CACHE
import "maths.vector" for Vector3
import "math" for Math

class CornerBuilder
{
	static compose_vert_inner(dg, inner)
	{
		import "archgraph.component.vert_gong" for VertGong
		import "archgraph.tools.vert_split" for VertSplit
		import "archgraph.tools.vert_merge" for VertMerge
		import "archgraph.component.shua_tou" for ShuaTou

		var vert = nil

		var layer = dg.layers[inner.comp.y_idx]
		for (var v in layer[0]) {
			if (!vert and v is VertGong) {
				vert = v
			}
		}
		if (!vert) {
			return nil
		}

		var inner_v = false

		import "archgraph.component.ang" for Ang 
		if (vert is VertSplit) 
		{
			var outer = Blueprint.get_output_node(vert, "outer")
			var inner = Blueprint.get_output_node(vert, "inner")
			if (outer is Ang) 
			{
				vert = inner
				inner_v = true
			} 
			else if (outer is ShuaTou)
			{
				vert = outer
			}
			else 
			{
				return GenNodes.corner_gen_2(inner.comp.v_geo, inner.comp.pos, 0)
			}
		}
		else if (vert is VertMerge)
		{
			vert = Blueprint.get_input_node(vert, "outer")
		}
		else if (GongHelper.calc_vert_pos(vert) == VERT_POS_INNER)
		{
			inner_v = true
		}

		var v_geo0 = nil
		var v_geo1 = nil

		import "archgraph.component.hua_gong" for HuaGong
		import "archgraph.component.chen_fang_tou" for ChenFangTou
		import "archgraph.component.cha_ang" for ChaAng
		import "archgraph.component.up_ang" for UpAng

		var len_l = VertGong.calc_tot_step_len(vert.outer_hop) / 1.414 + VertGong.get_dou_half_len()
		var len_r = VertGong.calc_tot_step_len(-vert.inner_hop) / 1.414 + VertGong.get_dou_half_len()
		var len_l_node = VariantProxy(Variant(len_l))
		var len_r_node = VariantProxy(Variant(len_r))
		if (vert is HuaGong)
		{
			var HUA_GONG = NODE_CACHE.fetch("../yingzao/00_dougong2/35_hua_gong.ves", nil)

			Blueprint.connect(len_l_node, "out", HUA_GONG, "len_left")
			Blueprint.connect(len_r_node, "out", HUA_GONG, "len_right")

			var single_node = VariantProxy(Variant(true))
			Blueprint.connect(single_node, "out", HUA_GONG, "single")

			v_geo0 = TransNodes.rotate(HUA_GONG, -Math.pi() * 0.5)
		}
		else if (vert is ShuaTou)
		{
			var SHUA_TOU = NODE_CACHE.fetch("../yingzao/00_dougong2/36_shua_tou.ves", nil)

			Blueprint.connect(len_l_node, "out", SHUA_TOU, "len_left")
			Blueprint.connect(len_r_node, "out", SHUA_TOU, "len_right")

			var single_node = VariantProxy(Variant(true))
			Blueprint.connect(single_node, "out", SHUA_TOU, "single")

			v_geo0 = TransNodes.rotate(SHUA_TOU, -Math.pi() * 0.5)
		}
		else if (vert is ChenFangTou)
		{
			var TOU = NODE_CACHE.fetch("../yingzao/00_dougong2/14_tou.ves", nil)

			len_l_node.variant.value = len_l_node.variant.value - VertGong.get_dou_half_len() * 2
			Blueprint.connect(len_l_node, "out", TOU, "len_left")
			Blueprint.connect(len_r_node, "out", TOU, "len_right")

			var full_node = VariantProxy(Variant(true))
			Blueprint.connect(full_node, "out", TOU, "full")

			v_geo0 = TransNodes.rotate(TOU, -Math.pi() * 0.5)
		}
		else if (vert is UpAng)
		{
			var HUA_GONG = NODE_CACHE.fetch("../yingzao/00_dougong2/35_hua_gong.ves", nil)

			Blueprint.connect(len_l_node, "out", HUA_GONG, "len_left")
			Blueprint.connect(len_r_node, "out", HUA_GONG, "len_right")

			var single_node = VariantProxy(Variant(true))
			Blueprint.connect(single_node, "out", HUA_GONG, "single")

			v_geo0 = TransNodes.rotate(HUA_GONG, -Math.pi() * 0.5)
		}

		// ang cut
		if (v_geo0) 
		{
			var p = vert.comp.pos
			v_geo0 = TransNodes.transform(VariantProxy(v_geo0), p, Math.pi() * 0.5)

			v_geo0 = AngHelper.ang_cut(vert, v_geo0, true)

			v_geo0 = TransNodes.translate(VariantProxy(v_geo0), Vector3(-p.x, -p.y, -p.z))
			v_geo0 = TransNodes.rotate(VariantProxy(v_geo0), -Math.pi() * 0.5)
		}

		import "archgraph.component.inner_gong" for InnerGong
		import "archgraph.component.fang" for Fang

		if (inner is InnerGong) 
		{
			v_geo1 = Blueprint.calc_output_value(inner.gong, "geo")
		} 
		else if (inner is Fang) 
		{
			var full = false
			if (vert is ChenFangTou) {
				full = true
			}

			import "archgraph.component.fang" for FANG

			var full_node = VariantProxy(Variant(full))
			Blueprint.connect(full_node, "out", FANG, "full")

			v_geo1 = Blueprint.calc_output_value(FANG, "geo")

			full_node.disconnect()
		}

		var v_geo = nil
		if (vert is ChaAng)
		{
			// ang
			var z = vert.calc_outer_step_len() / 1.414
			var a_pos = Vector3(0, ZU_CAI_HEIGHT, z)
			var v_ang = AngHelper.create_ang(a_pos)
			v_ang = JointsNodes.cut_top_plane(v_ang, a_pos.y)
			v_ang = TransNodes.rotate(VariantProxy(v_ang), -Math.pi() * 0.5)

			// hua
			var HUA_GONG = NODE_CACHE.fetch("../yingzao/00_dougong2/35_hua_gong.ves", nil)

			Blueprint.connect(len_l_node, "out", HUA_GONG, "len_left")
			Blueprint.connect(len_r_node, "out", HUA_GONG, "len_right")

			var single_node = VariantProxy(Variant(false))
			Blueprint.connect(single_node, "out", HUA_GONG, "single")

			var v_hua = Blueprint.calc_output_value(HUA_GONG, "geo")
			v_hua = AngHelper.down_ang_cut(v_hua, true, a_pos)
			v_hua = TransNodes.rotate(VariantProxy(v_hua), -Math.pi() * 0.5)

			// compose
			v_geo = Variant([ v_hua, v_ang ])
		}
		else
		{
			v_geo = GenNodes.compose_gong(v_geo0, v_geo1)
		}

		// add dou
		import "archgraph.component.dou" for SAN_DOU, JIAOHU_DOU
		var GD_SUN = NODE_CACHE.fetch("../yingzao/00_dougong2/10_gd_sun.ves", nil)

		var l_x = -VertGong.calc_tot_step_len(vert.outer_hop) / 1.414

		var r_x = 0

		if (v_geo1) 
		{
			var dou_pos_x = DouHelper.calc_dou_pos_x(v_geo1)
			r_x = dou_pos_x[1]

			if (r_x > 0.9) {
				r_x = 0.41
			}
		}

		var add_dou = true
		if (vert is ChenFangTou) {
			add_dou = false
		}

		var no_right_dou = false
		if (!v_geo1) {
			no_right_dou = true
		}

		var no_left_dou = false
		if (inner_v) {
			no_left_dou = true
		}

		if (no_left_dou and no_right_dou) {
			add_dou = false
		}

		if (add_dou)
		{
			if (no_left_dou)
			{
				var r_pos = Vector3(r_x, CAI_HEIGHT, 0)

				var r_sun = TransNodes.translate(GD_SUN, r_pos)

				var r_dou = TransNodes.translate(SAN_DOU, r_pos)

				v_geo = JointsNodes.cut_geo_node(v_geo, GD_SUN, [ r_pos ])
				v_geo = Variant([ v_geo, r_sun, r_dou ])
			}
			else if (no_right_dou)
			{
				var l_pos = Vector3(l_x, CAI_HEIGHT, 0)

				var l_sun = TransNodes.translate(GD_SUN, l_pos)

				var l_dou = TransNodes.transform(JIAOHU_DOU, l_pos, Math.pi() * 0.5)

				v_geo = JointsNodes.cut_geo_node(v_geo, GD_SUN, l_pos)
				v_geo = Variant([ v_geo, l_sun, l_dou ])
			}
			else
			{
				var l_pos = Vector3(l_x, CAI_HEIGHT, 0)
				var r_pos = Vector3(r_x, CAI_HEIGHT, 0)

				var l_sun = TransNodes.translate(GD_SUN, l_pos)
				var r_sun = TransNodes.translate(GD_SUN, r_pos)

				var l_dou = TransNodes.transform(JIAOHU_DOU, l_pos, Math.pi() * 0.5)
				var r_dou = TransNodes.translate(SAN_DOU, r_pos)

				v_geo = JointsNodes.cut_geo_node(v_geo, GD_SUN, [ l_pos, r_pos ])
				v_geo = Variant([ v_geo, [ l_sun, r_sun ], [ l_dou, r_dou ] ])
			}
		}

		var offset = 0
		return GenNodes.corner_gen_2(v_geo, inner.comp.pos, offset)
	}
}
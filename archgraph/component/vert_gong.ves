import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant
import "archgraph.component.comp_node" for CompNode
import "archgraph.constant" for CAI_HEIGHT, ZU_CAI_HEIGHT, QI_HEIGHT
import "archgraph.variant" for PIN_TYPE_VERT_GONG, PIN_TYPE_HORI_GONG
import "archgraph.trans_nodes" for TransNodes
import "archgraph.node_helper" for NodeHelper
import "archgraph.context" for CONTEXT
import "archgraph.joints_nodes" for JointsNodes
import "maths.vector" for Vector3
import "editor.node_cache" for NODE_CACHE
import "math" for Math

class VertGong is CompNode
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "prev", PIN_TYPE_VERT_GONG),
		]
		this.exports = [
			Pin(this, "next",  PIN_TYPE_VERT_GONG),
			Pin(this, "outer", PIN_TYPE_HORI_GONG),
			Pin(this, "inner", PIN_TYPE_HORI_GONG)
		]

		this.layout()

		this.outer_hop = 0
		this.inner_hop = 0

		this.less_step = true
	}

	calc_value(idx)
	{
		var z = 0
		if (idx == 0) {
			z = 0
		} else if (idx == 1) {
			z = this.calc_outer_step_len()
		} else if (idx == 2) {
			z = - this.calc_inner_step_len()
		}
		var pos = NodeHelper.calc_curr_pos(this, "prev")
		return Variant(pos.add(Vector3(0, ZU_CAI_HEIGHT, z)))
	}

	calc_outer_step_len()
	{
		return VertGong.calc_tot_step_len(this.outer_hop, this.less_step)
	}

	calc_inner_step_len()
	{
		return VertGong.calc_tot_step_len(-this.inner_hop, this.less_step)
	}

	static calc_tot_step_len(hop, less_step)
	{
		var len = 0

		var len_func = nil
		if (CONTEXT.gen_corner) {
			len_func = CONTEXT.step_len_c_func
		} else {
			len_func = CONTEXT.step_len_func
		}

		if (hop > 0) {
			for (var i in 1 .. hop + 1) {
				len = len + len_func(i, less_step)
			}
		} else {
			for (var i in 1 .. -hop + 1) {
				len = len + len_func(-i, less_step)
			}
		}

		return len
	}

	static get_dou_half_len()
	{
		return 0.06
	}

	add_dou(v_geo, left, right)
	{
		if (!left and !right) {
			return v_geo
		}

		var GD_SUN = NODE_CACHE.fetch("../yingzao/00_dougong2/10_gd_sun.ves", nil)

		if (left and right)
		{
			var l_pos = Blueprint.calc_output_value(this, "outer").value
			var r_pos = Blueprint.calc_output_value(this, "inner").value
			l_pos.y = l_pos.y - QI_HEIGHT
			r_pos.y = r_pos.y - QI_HEIGHT

			var l_sun = TransNodes.translate(GD_SUN, l_pos)
			var r_sun = TransNodes.translate(GD_SUN, r_pos)

			var next_v = Blueprint.get_output_node(this, "next")
			var next_o = Blueprint.get_output_node(this, "outer")
			var next_i = Blueprint.get_output_node(this, "inner")

			var l_dou = this.gen_dou(next_v, next_o, l_pos)
			var r_dou = this.gen_dou(next_v, next_i, r_pos)

			// cut sun
			v_geo = JointsNodes.cut_geo_node(v_geo, GD_SUN, [ l_pos, r_pos ])

			return Variant([ v_geo, [ l_sun, r_sun ], [ l_dou, r_dou ] ])
		}
		else
		{
			var pos = nil
			if (left) {
				pos = Blueprint.calc_output_value(this, "outer").value
			} else {
				pos = Blueprint.calc_output_value(this, "inner").value
			}
			pos.y = pos.y - QI_HEIGHT

			var sun = TransNodes.translate(GD_SUN, pos)

			var next_v = Blueprint.get_output_node(this, "next")
			var next_h = nil
			if (left) {
				next_h = Blueprint.get_output_node(this, "outer")
			} else {
				next_h = Blueprint.get_output_node(this, "inner")
			}
			var v_dou = this.gen_dou(next_v, next_h, pos)

			// cut sun
			v_geo = JointsNodes.cut_geo_node(v_geo, GD_SUN, pos)

			return Variant([ v_geo, sun, v_dou ])
		}
	}

	gen_dou(vert, hori, pos)
	{
		import "archgraph.component.dou" for SAN_DOU, JIAOHU_DOU, PINGPAN_DOU, LIANZHU_DOU

		if (pos.z < 0)
		{
			import "archgraph.component.up_ang" for UpAng
			var next = Blueprint.get_output_node(this, "next")
			if (next and next is UpAng) {
				return TransNodes.translate(LIANZHU_DOU, pos)
			}
		}

		if (vert and hori) 
		{
			if (CONTEXT.gen_corner) {
				return TransNodes.translate(PINGPAN_DOU, pos)
			} else {
				return TransNodes.translate(JIAOHU_DOU, pos)			
			}
		} 
		else if (vert) 
		{
			return TransNodes.transform(SAN_DOU, pos, Math.pi() * 0.5)
		} 
		else if (hori) 
		{
			return TransNodes.translate(SAN_DOU, pos)
		} 
		else 
		{
//			return nil
			return TransNodes.translate(SAN_DOU, pos)
		}
	}
}
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant
import "blueprint.variant_proxy" for VariantProxy
import "archgraph.trans_nodes" for TransNodes
import "archgraph.node_helper" for NodeHelper
import "archgraph.component.vert_gong" for VertGong
import "archgraph.context" for CONTEXT
import "archgraph.constant" for CAI_WIDTH
import "archgraph.gen_nodes" for GenNodes
import "archgraph.ang_helper" for AngHelper
import "editor.node_cache" for NODE_CACHE
import "maths.vector" for Vector3

var SHUA_TOU = NODE_CACHE.fetch("../yingzao/00_dougong2/36_shua_tou.ves", nil)

class ShuaTou is VertGong
{
	resolve(dg)
	{
		import "archgraph.tools.vert_merge" for VertMerge
		import "archgraph.component.lu_dou" for LuDou

		var prev = Blueprint.get_input_node(this, "prev")
		if (prev is VertGong) {
			this.outer_hop = prev.outer_hop
			this.inner_hop = prev.inner_hop
		} else {
			this.outer_hop = 1
			this.inner_hop = 1		
		}

		var single_node = nil
		var next = NodeHelper.get_output_valid_node(this, "next")
		if (next) {
			if (next is VertMerge) {
				single_node = VariantProxy(Variant(true))
			}
		} else {
			single_node = VariantProxy(Variant(true))			
		}
		if (single_node) {
			Blueprint.connect(single_node, "out", SHUA_TOU, "single")
		}

		var pos = NodeHelper.calc_curr_pos(this, "prev")

		var v_geo = nil
		if ((this.outer_hop == 1 or this.inner_hop == 1) and prev is LuDou) {
			v_geo = ShuaTou.create_geo(0.12, pos)
		} else {
			v_geo = ShuaTou.create_geo(this.outer_hop, this.inner_hop, pos)
		}

		import "archgraph.component.up_ang" for UpAng			
		if (prev is UpAng) {
			v_geo = prev.ang_plane_cut(v_geo)
		}

		// conn next
//		v_geo = this.add_dou(v_geo, true, true)

		this.comp.pos = pos
		this.comp.v_geo = v_geo

		// todo: you ang
		this.gen_corner(dg)

		if (single_node) {
			single_node.disconnect()
		}
	}

	resolve2(dg)
	{
		// todo: v_geo_c
		this.comp.v_geo = AngHelper.ang_cut(this, this.comp.v_geo)
	}

	get_title()
	{
		return "耍头"
	}

	static create_geo(outer_hop, inner_hop, pos)
	{
		var len_l = VertGong.calc_tot_step_len(outer_hop) + VertGong.get_dou_half_len()
		var len_r = VertGong.calc_tot_step_len(-inner_hop) + VertGong.get_dou_half_len()
		var len_l_node = VariantProxy(Variant(len_l))
		var len_r_node = VariantProxy(Variant(len_r))
		Blueprint.connect(len_l_node, "out", SHUA_TOU, "len_left")
		Blueprint.connect(len_r_node, "out", SHUA_TOU, "len_right")

		return TransNodes.translate(SHUA_TOU, pos)
	}

	static create_geo(len, pos)
	{
		Blueprint.connect(VariantProxy(Variant(len)), "out", SHUA_TOU, "len_left")
		Blueprint.connect(VariantProxy(Variant(len)), "out", SHUA_TOU, "len_right")
		return TransNodes.translate(SHUA_TOU, pos)
	}

	gen_corner(dg)
	{
		var len_l = VertGong.calc_tot_step_len(this.outer_hop) + VertGong.get_dou_half_len()
		var len_r = VertGong.calc_tot_step_len(-this.inner_hop) + VertGong.get_dou_half_len()
		var len_l_node = VariantProxy(Variant(len_l / 1.414))
		var len_r_node = VariantProxy(Variant(len_r / 1.414))

		Blueprint.connect(len_l_node, "out", SHUA_TOU, "len_left")
		Blueprint.connect(len_r_node, "out", SHUA_TOU, "len_right")

		var v_geo = Blueprint.calc_output_value(SHUA_TOU, "geo")

		var prev = Blueprint.get_input_node(this, "prev")
		import "archgraph.component.ang" for Ang
		if (prev is Ang) {
			var a_pos = prev.calc_ang_pos()
			v_geo = AngHelper.down_ang_cut(v_geo, false, Vector3(0, 0, a_pos.z / 1.414))
		}

		this.comp.v_geo_c = GenNodes.corner_gen_2(v_geo, this.comp.pos, 0)
	}
}
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant
import "blueprint.variant_proxy" for VariantProxy
import "geograph.nodes.knife" for Knife
import "scenegraph.nodes.transform3d" for Transform3d
import "archgraph.component.vert_gong" for VertGong
import "archgraph.trans_nodes" for TransNodes
import "archgraph.context" for CONTEXT
import "archgraph.node_helper" for NodeHelper
import "archgraph.constant" for CAI_HEIGHT, ZU_CAI_HEIGHT, QI_HEIGHT
import "archgraph.joints_nodes" for JointsNodes
import "archgraph.tools_nodes" for ToolsNodes
import "maths.vector" for Vector3
import "editor.node_cache" for NODE_CACHE
import "math" for Math

var ANG    = NODE_CACHE.fetch("../yingzao/00_dougong2/38_up_ang.ves", nil)
var XUE    = NODE_CACHE.fetch("../yingzao/00_dougong2/38_xue_qi.ves", nil)
var GD_SUN = NODE_CACHE.fetch("../yingzao/00_dougong2/10_gd_sun.ves", nil)

class UpAng is VertGong
{
	calc_value(idx)
	{
		if (idx == 2) 
		{
			var ang_pos = this.calc_ang_pos()
			ang_pos.y = ang_pos.y + this.calc_first_dy()
			return Variant(ang_pos)
		} 
		else 
		{
			return super.calc_value(idx)
		}
	}

	resolve(dg)
	{
		this.outer_hop = 1
		this.inner_hop = 1

		var prev = Blueprint.get_input_node(this, "prev")
		if (prev) 
		{
			if (prev is VertGong) {
				this.outer_hop = prev.outer_hop	+ 1
				this.inner_hop = prev.inner_hop + 1
			}
			if (prev is UpAng or this.comp.y_idx > 3) {
				this.outer_hop = prev.outer_hop
			}
		}

		if (CONTEXT.s_ang_slope) {
			Blueprint.connect(CONTEXT.s_ang_slope, "ang_slope", ANG, "slope")
		}

		var ang_pos = this.calc_ang_pos()
		ang_pos.y = ang_pos.y + this.calc_first_dy()

		var v_geo = TransNodes.translate(ANG, ang_pos)

		var v_left = nil
		var pz = this.is_ping_zuo()
		if (pz)
		{
			import "archgraph.component.chen_fang_tou" for ChenFangTou
			var pos_n = NodeHelper.calc_curr_pos(this, "prev")
			v_left = ChenFangTou.create_geo(1, 1, pos_n, true)
		}
		else
		{
			var pos_n = NodeHelper.calc_curr_pos(this, "prev")		
			if (prev is UpAng) 
			{
				if (this.comp.y_idx > 3) {
					import "archgraph.component.chen_fang_tou" for ChenFangTou
					v_left = ChenFangTou.create_geo(this.outer_hop, this.inner_hop, pos_n, true)
				} else {
					import "archgraph.component.shua_tou" for ShuaTou
					v_left = ShuaTou.create_geo(this.outer_hop, this.inner_hop, pos_n)
				}
			} 
			else 
			{
				if (this.comp.y_idx > 3) {
					import "archgraph.component.shua_tou" for ShuaTou
					v_left = ShuaTou.create_geo(this.outer_hop, this.inner_hop, pos_n)
				} else {
					import "archgraph.component.hua_gong" for HuaGong
					v_left = HuaGong.create_geo(this.outer_hop, this.inner_hop, pos_n)
				}
			}
		}

		var v_xue = nil
		if (!(prev is UpAng)) {
			Blueprint.connect(CONTEXT.s_ang_slope, "ang_slope", XUE, "slope")
//			v_xue = TransNodes.translate(XUE, ang_pos)			
		}

		// ang cut
		v_left = this.ang_plane_cut(v_left)

		// conn next
		v_geo = this.add_dou(Variant([v_xue, v_geo, v_left]), !pz, true)

		this.comp.pos = ang_pos
		this.comp.v_geo = v_geo
		this.comp.v_geo_c = this.comp.v_geo
	}

	get_title()
	{
		return "上昂"
	}

	calc_ang_pos()
	{
		var dist = 0
		if (CONTEXT.gen_corner) {
			dist = CONTEXT.step_len_c_func(-this.inner_hop, true)
		} else {
			dist = CONTEXT.step_len_func(-this.inner_hop, true)
		}

		var prev = Blueprint.get_input_node(this, "prev")
		if (prev is UpAng)
		{
			var pos = prev.calc_ang_pos()
			if (pos) {
				return pos.add(Vector3(0, ZU_CAI_HEIGHT, -dist))
			}
		}
		else
		{
			var pos = Blueprint.calc_output_value(prev, "inner").value
			if (pos) {
				return pos.add(Vector3(0, ZU_CAI_HEIGHT * 2, -dist))
			}
		}

		return Vector3(0, 0, 0)
	}

	calc_first_dy()
	{
		var next = NodeHelper.get_output_valid_node(this, "next")
		if (next is UpAng and CONTEXT.s_ang_slope)
		{
			var slope = Blueprint.calc_output_value(CONTEXT.s_ang_slope, "ang_slope").value
			var angle = Math.atan2(slope, 1)
			return ZU_CAI_HEIGHT - (CONTEXT.step_len_func(-this.inner_hop - 1, true) * slope + CAI_HEIGHT / Math.cos(angle))
		}
		return 0
	}

	ang_plane_cut(geo)
	{
		var ang_pos = this.calc_ang_pos()
		ang_pos.y = ang_pos.y + this.calc_first_dy()
		return UpAng.ang_plane_cut(geo, ang_pos)
	}

	is_ping_zuo()
	{
		import "archgraph.tools.vert_merge" for VertMerge
		import "archgraph.component.chen_fang_tou" for ChenFangTou

		var prev = Blueprint.get_input_node(this, "prev")
		if (prev is VertMerge) 
		{
			var outer = Blueprint.get_input_node(prev, "outer")
			if (outer is ChenFangTou) {
				return true
			}
		}
		else if (prev is UpAng)
		{
			return prev.is_ping_zuo()
		}

		return false
	}

	static ang_plane_cut(geo, pos)
	{
		var KNIFE = Knife()
		KNIFE.query_param("keep").set_value("above")
		KNIFE.query_param("seam").set_value(true)

		var trans = Transform3d()
		Blueprint.connect(ANG, "plane", trans, "obj")

		var pos_node = VariantProxy(Variant(pos))
		Blueprint.connect(pos_node, "out", trans, "translate")

		var geo_node = VariantProxy(geo)
		Blueprint.connect(geo_node, "out", KNIFE, "geo")
		Blueprint.connect(trans, "obj", KNIFE, "plane")
		return Blueprint.calc_output_value(KNIFE, "geo")		
	}
}
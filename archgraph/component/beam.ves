import "blueprint.pin" for Pin
import "blueprint.variant" for Variant
import "blueprint.blueprint" for Blueprint
import "blueprint.variant_proxy" for VariantProxy
import "blueprint.node_param" for NodeParam
import "archgraph.component.comp_node" for CompNode
import "archgraph.variant" for PIN_TYPE_VERT_GONG
import "archgraph.constant" for ZU_CAI_HEIGHT
import "archgraph.node_helper" for NodeHelper
import "archgraph.trans_nodes" for TransNodes
import "archgraph.context" for CONTEXT
import "archgraph.component.vert_gong" for VertGong
import "archgraph.constant" for DOU_H_WIDTH
import "maths.vector" for Vector3
import "editor.node_cache" for NODE_CACHE

class Beam is CompNode
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "prev", PIN_TYPE_VERT_GONG),
		]
		this.exports = [
			Pin(this, "next", PIN_TYPE_VERT_GONG),
		]

		this.params.add(NodeParam("h", 0.21))
		this.params.add(NodeParam("stright", true))

		this.layout()
	}

	calc_value(idx)
	{
		var pos = NodeHelper.calc_curr_pos(this, "prev")
		return Variant(pos.add(Vector3(0, ZU_CAI_HEIGHT, 0)))
	}

	on_node_dirty()
	{
		CONTEXT.style_changed = true
	}

	resolve(dg)
	{
		var pos = NodeHelper.calc_curr_pos(this, "prev")

		this.comp.pos = pos

		var s = this.query_param("stright").value
		if (s) {
			this.comp.v_geo = this.create_straight(pos)			
		} else {
			this.comp.v_geo = this.create_crescent(pos)
		}
	}

	get_title()
	{
		return "Ê¢Å"
	}

	create_straight(pos)
	{
		var BEAM = NODE_CACHE.fetch("../yingzao/00_dougong2/45_s_beam.ves", nil)

		var h = this.query_param("h").value
		var h_node = VariantProxy(Variant(h))
		Blueprint.connect(h_node, "out", BEAM, "height")
		
		var v_geo = TransNodes.translate(BEAM, pos)

		var prev = Blueprint.get_input_node(this, "prev")
		var offset = 0
		if (prev is VertGong) {
			offset = prev.calc_outer_step_len() + DOU_H_WIDTH
		} else {
			offset = 0.25
		}
		v_geo = TransNodes.translate(VariantProxy(v_geo), Vector3(0, 0, offset))

		return v_geo
	}

	create_crescent(pos)
	{
		var BEAM = NODE_CACHE.fetch("../yingzao/00_dougong2/45_c_beam.ves", nil)

		var h = this.query_param("h").value
		var h_node = VariantProxy(Variant(h))
		Blueprint.connect(h_node, "out", BEAM, "height")

		var w_node = VariantProxy(Variant(h * 2 / 3))
		Blueprint.connect(w_node, "out", BEAM, "width")

		var prev = Blueprint.get_input_node(this, "prev")
		var offset = 0
		if (prev is VertGong) {
			offset = prev.calc_outer_step_len() + DOU_H_WIDTH
		} else {
			offset = 0.25
		}

		var h_len_node = VariantProxy(Variant(offset + 0.09))
		Blueprint.connect(h_len_node, "out", BEAM, "head_len")

		var v_geo = TransNodes.translate(BEAM, pos)

		v_geo = TransNodes.translate(VariantProxy(v_geo), Vector3(0, 0, offset))

		return v_geo
	}

	is_stright()
	{
		return this.query_param("stright").value
	}
}
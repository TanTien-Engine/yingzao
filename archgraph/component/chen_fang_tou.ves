import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant
import "blueprint.variant_proxy" for VariantProxy
import "archgraph.component.vert_gong" for VertGong
import "archgraph.trans_nodes" for TransNodes
import "archgraph.node_helper" for NodeHelper
import "archgraph.gen_nodes" for GenNodes
import "archgraph.constant" for DOU_H_WIDTH
import "archgraph.ang_helper" for AngHelper
import "editor.node_cache" for NODE_CACHE
import "math" for Math
import "maths.vector" for Vector3

var TOU = NODE_CACHE.fetch("../yingzao/00_dougong2/14_tou.ves", nil)

class ChenFangTou is VertGong
{
	resolve(dg)
	{
		var prev = Blueprint.get_input_node(this, "prev")
		if (prev) {
			this.outer_hop = prev.outer_hop
			this.inner_hop = prev.inner_hop
		} else {
			this.outer_hop = 1
			this.inner_hop = 1		
		}
		
		var pos = NodeHelper.calc_curr_pos(this, "prev")
		var full = NodeHelper.get_output_valid_node(this, "next") != nil
		var v_geo = ChenFangTou.create_geo(this.outer_hop, this.inner_hop, pos, full)
		
		// ang cut
		var pp_node = nil
		if (prev) {
			pp_node = Blueprint.get_input_node(prev, "prev")
		}
		import "archgraph.component.ang" for Ang
		import "archgraph.component.up_ang" for UpAng
		if (prev is UpAng) {
			v_geo = prev.ang_plane_cut(v_geo)
		}
		if (pp_node and pp_node is Ang) {
			v_geo = pp_node.ang_plane_cut(v_geo, false)
		}

		this.comp.pos = pos
		this.comp.v_geo = v_geo

		this.gen_corner(dg)
	}

	get_title()
	{
		return "衬方头"
	}

	gen_corner(dg)
	{
		var len_l = VertGong.calc_tot_step_len(this.outer_hop) + DOU_H_WIDTH
		var len_r = VertGong.calc_tot_step_len(-this.inner_hop) + DOU_H_WIDTH
		var len_l_node = VariantProxy(Variant(len_l / 1.414))
		var len_r_node = VariantProxy(Variant(len_r / 1.414))

		Blueprint.connect(len_l_node, "out", TOU, "len_left")
		Blueprint.connect(len_r_node, "out", TOU, "len_right")

		var v_geo = TransNodes.translate(TOU, Vector3(0, 0, 0))

		// ang cut
		var prev = Blueprint.get_input_node(this, "prev")
		var pp_node = nil
		if (prev) {
			pp_node = Blueprint.get_input_node(prev, "prev")
		}
		import "archgraph.component.ang" for Ang
		if (pp_node and pp_node is Ang) {
			var a_pos = pp_node.calc_ang_pos()
			v_geo = AngHelper.down_ang_cut(v_geo, false, Vector3(0, pp_node.comp.pos.y - this.comp.pos.y, a_pos.z / 1.414))		
		}

		this.comp.v_geo_c = GenNodes.corner_gen_2(v_geo, this.comp.pos, 0)
	}

	static create_geo(outer_hop, inner_hop, pos, full)
	{
		var len_l = VertGong.calc_tot_step_len(outer_hop) + DOU_H_WIDTH
		var len_r = VertGong.calc_tot_step_len(-inner_hop) + DOU_H_WIDTH

		var len_l_node = VariantProxy(Variant(len_l))
		var len_r_node = VariantProxy(Variant(len_r))
		Blueprint.connect(len_l_node, "out", TOU, "len_left")
		Blueprint.connect(len_r_node, "out", TOU, "len_right")

		var full_node = VariantProxy(Variant(full))
		Blueprint.connect(full_node, "out", TOU, "full")

		return TransNodes.translate(TOU, pos)
	}
}
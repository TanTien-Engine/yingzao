import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant
import "blueprint.variant_proxy" for VariantProxy
import "geograph.nodes.knife" for Knife
import "scenegraph.nodes.transform3d" for Transform3d
import "archgraph.context" for CONTEXT
import "archgraph.trans_nodes" for TransNodes
import "editor.node_cache" for NODE_CACHE

class AngHelper
{
	static create_ang(pos)
	{
		var ANG = NODE_CACHE.fetch("../yingzao/00_dougong2/37_ang.ves", nil)
		if (CONTEXT.s_ang_slope) {
			Blueprint.connect(CONTEXT.s_ang_slope, "ang_slope", ANG, "slope")
		}
		return TransNodes.translate(ANG, pos)
	}

	static create_ang(pos, len)
	{
		var ANG = NODE_CACHE.fetch("../yingzao/00_dougong2/37_ang.ves", nil)
		if (CONTEXT.s_ang_slope) {
			Blueprint.connect(CONTEXT.s_ang_slope, "ang_slope", ANG, "slope")
		}

		var len_node = VariantProxy(Variant(len))
		Blueprint.connect(len_node, "out", ANG, "length")
		
		var ret = TransNodes.translate(ANG, pos)

		len_node.disconnect()

		return ret
	}

	static add_dou(v_geo, pos)
	{
		import "archgraph.component.dou" for QIANG_DOU

		var GD_SUN = NODE_CACHE.fetch("../yingzao/00_dougong2/10_gd_sun.ves", nil)
		var v_sun = TransNodes.translate(GD_SUN, pos)
		var v_dou = TransNodes.translate(QIANG_DOU, pos)
		return Variant([ v_geo, v_sun, v_dou ])
	}

	static down_ang_cut(geo, down, pos)
	{
		var ANG = NODE_CACHE.fetch("../yingzao/00_dougong2/37_ang.ves", nil)
		if (CONTEXT.s_ang_slope) {
			Blueprint.connect(CONTEXT.s_ang_slope, "ang_slope", ANG, "slope")
		}
		
		var KNIFE = Knife()
		if (down) {
			KNIFE.query_param("keep").set_value("below")
		} else {
			KNIFE.query_param("keep").set_value("above")
		}
		KNIFE.query_param("seam").set_value(true)

		var trans = Transform3d()
		if (down) {
			Blueprint.connect(ANG, "down_plane", trans, "obj")
		} else {
			Blueprint.connect(ANG, "up_plane", trans, "obj")
		}

		var pos_node = VariantProxy(Variant(pos))
		Blueprint.connect(pos_node, "out", trans, "translate")

		var geo_node = VariantProxy(geo)
		Blueprint.connect(geo_node, "out", KNIFE, "geo")
		Blueprint.connect(trans, "obj", KNIFE, "plane")
		return Blueprint.calc_output_value(KNIFE, "geo")		
	}

	static ang_cut(node, geo)
	{
		return this.ang_cut(node, geo, false)
	}

	static up_ang_cut(node, geo, outer, corner_trans)
	{
		return node.ang_plane_cut(geo, outer, corner_trans)
	}

	static ang_plane_cut(v_geo, v_ang, down, corner_trans)
	{
		var ang_pos = v_ang.calc_ang_pos()

		if (corner_trans) {
			ang_pos.z = ang_pos.z / 1.414		
		}

		return AngHelper.down_ang_cut(v_geo, down, ang_pos)	
	}

	static ang_cut(node, geo, corner_trans)
	{
		import "archgraph.component.ang" for Ang 
		import "archgraph.component.up_ang" for UpAng 
		import "archgraph.tools.vert_split" for VertSplit

		var pin_name = nil
		var prev_pin = Blueprint.get_input_pin(node, "prev")
		if (prev_pin) {
			pin_name = prev_pin.name
		}

		var prev = Blueprint.get_input_node(node, "prev")
		while (prev)
		{
			if (prev is Ang) 
			{
				return this.ang_plane_cut(geo, prev, false, corner_trans)
			} 
			else if (prev is VertSplit) 
			{
				var left = Blueprint.get_output_node(prev, "outer")
				if (left is Ang and left != node) {
					return this.ang_plane_cut(geo, left, true, corner_trans)
				} else if (left is UpAng and pin_name == "inner") {
					return this.up_ang_cut(left, geo, true, corner_trans)
				}

				var right = Blueprint.get_output_node(prev, "inner")
				if (!CONTEXT.gen_corner and right is Ang and right != node) {
					return this.ang_plane_cut(geo, right, false, corner_trans)
				} else if (right is UpAng and pin_name == "outer") {
					return this.up_ang_cut(right, geo, false, corner_trans)
				}
			}
			// else if prev is merge, return

			var prev_pin = Blueprint.get_input_pin(prev, "prev")
			if (prev_pin) {
				pin_name = prev_pin.name
			}

			prev = Blueprint.get_input_node(prev, "prev")
		}

		return geo
	}

	static get_slope()
	{
		var slope = 6/16
		if (CONTEXT.s_ang_slope) {
			slope = Blueprint.calc_output_value(CONTEXT.s_ang_slope, "ang_slope").value
		}
		return slope
	}
}
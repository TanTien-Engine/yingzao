import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant
import "blueprint.variant_proxy" for VariantProxy
import "gonggraph.tools_nodes" for ToolsNodes
import "gonggraph.trans_nodes" for TransNodes
import "editor.node_cache" for NODE_CACHE
import "math" for Math

class GenNodes
{
	static corner_gen_2(v_geo, pos, offset)
	{
		var CORNER_GEN_2 = NODE_CACHE.fetch("../yingzao/00_dougong2/51_corner_gen_2.ves", nil)

		var geo_node = VariantProxy(v_geo)
		Blueprint.connect(geo_node, "out", CORNER_GEN_2, "geo")

		var pos_node = VariantProxy(Variant(pos))
		Blueprint.connect(pos_node, "out", CORNER_GEN_2, "pos")

		var offset_node = VariantProxy(Variant(offset))
		Blueprint.connect(offset_node, "out", CORNER_GEN_2, "offset")

		var geo0 = Blueprint.calc_output_value(CORNER_GEN_2, "geo0")
		var geo1 = Blueprint.calc_output_value(CORNER_GEN_2, "geo1")

		return Variant([ geo0, geo1 ])
	}

	// fixme
	static corner_gen_2_no_mirror(v_geo, pos, offset)
	{
		var CORNER_GEN_2 = NODE_CACHE.fetch("../yingzao/00_dougong2/51_corner_gen_2.ves", nil)

		var no_mirror_node = VariantProxy(Variant(true))
		Blueprint.connect(no_mirror_node, "out", CORNER_GEN_2, "no_mirror")

		var ret = this.corner_gen_2(v_geo, pos, offset)

		no_mirror_node.disconnect()

		return ret
	}	

	static gong_add_fang(v_geo, pos)
	{
		var ADD_FANG = NODE_CACHE.fetch("../yingzao/00_dougong2/50_gong_add_fang.ves", nil)

		var geo_node = VariantProxy(v_geo)
		Blueprint.connect(geo_node, "out", ADD_FANG, "geo")

		var pos_node = VariantProxy(Variant(pos))
		Blueprint.connect(pos_node, "out", ADD_FANG, "pos")

		return Blueprint.calc_output_value(ADD_FANG, "geo")
	}

	static gong_add_head(v_geo)
	{
		var ADD_HEAD = NODE_CACHE.fetch("../yingzao/00_dougong2/50_gong_add_head.ves", nil)

		Blueprint.connect(VariantProxy(0), "out", ADD_HEAD, "head")

		if (ToolsNodes.is_gong_vert(v_geo))
		{
			var geo = TransNodes.rotate(VariantProxy(v_geo), -Math.pi() * 0.5)

			Blueprint.connect(VariantProxy(geo), "out", ADD_HEAD, "geo")
			Blueprint.connect(VariantProxy(0), "out", ADD_HEAD, "left")

			geo = Blueprint.calc_output_value(ADD_HEAD, "geo")

			return TransNodes.rotate(VariantProxy(geo), Math.pi() * 0.5)
		}
		else
		{
			Blueprint.connect(VariantProxy(geo), "out", ADD_HEAD, "geo")
			Blueprint.connect(VariantProxy(0), "out", ADD_HEAD, "left")

			return Blueprint.calc_output_value(ADD_HEAD, "geo")
		}
	}

	static compose_gong(v_geo0, v_geo1)
	{
		var COMPOSE = NODE_CACHE.fetch("../yingzao/00_dougong2/52_compose_gong.ves", nil)

		var geo0_node = VariantProxy(v_geo0)
		Blueprint.connect(geo0_node, "out", COMPOSE, "geo0")

		var geo1_node = VariantProxy(v_geo1)
		Blueprint.connect(geo1_node, "out", COMPOSE, "geo1")

		return Blueprint.calc_output_value(COMPOSE, "geo")		
	}
}
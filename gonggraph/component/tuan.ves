import "blueprint.pin" for Pin
import "blueprint.variant" for Variant
import "blueprint.blueprint" for Blueprint
import "gonggraph.component.comp_node" for CompNode
import "gonggraph.variant" for PIN_TYPE_PING_TUAN
import "gonggraph.node_helper" for NodeHelper
import "gonggraph.trans_nodes" for TransNodes
import "gonggraph.gong_helper" for GongHelper
import "gonggraph.gen_nodes" for GenNodes
import "maths.vector" for Vector3
import "editor.node_cache" for NODE_CACHE

var TUAN = NODE_CACHE.fetch("../yingzao/00_dougong2/44_tuan.ves", nil)		

class Tuan is CompNode
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "prev", PIN_TYPE_PING_TUAN),
		]
		this.exports = [
			Pin(this, "next", PIN_TYPE_PING_TUAN),
		]

		this.layout()

		this.gong = nil
	}

	calc_value(idx)
	{
		var pos = NodeHelper.calc_curr_pos(this, "prev")
		return Variant(pos.add(Vector3(0, 0.12, 0)))
	}

	resolve(dg)
	{
		// translate
		var pos = NodeHelper.calc_curr_pos(this, "prev")
		var v_geo = TransNodes.translate(TUAN, pos)

		this.comp.pos = pos
		this.comp.v_geo = v_geo

		this.gen_corner(dg)
	}

	gen_corner(dg)
	{
		var v_geo = Blueprint.calc_output_value(TUAN, "geo")

		var offset = 0
		if (GongHelper.is_ang_inside(this)) {
			offset = 0.4
		}

		this.comp.v_geo_c = GenNodes.corner_gen_2_no_mirror(v_geo, this.comp.pos, offset)
	}

	get_title()
	{
		if (this.comp.x_idx == 0) {
			return "承椽槫"
		} else if (this.comp.x_idx < 0) {
			return "下平槫"
		} else {
			return "槫"
		}
	}
}
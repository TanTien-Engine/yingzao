import "blueprint.pin" for Pin
import "blueprint.variant" for Variant
import "blueprint.blueprint" for Blueprint
import "blueprint.variant_proxy" for VariantProxy
import "gonggraph.component.comp_node" for CompNode
import "gonggraph.variant" for PIN_TYPE_VERT_GONG
import "gonggraph.constant" for ZU_CAI_HEIGHT
import "gonggraph.node_helper" for NodeHelper
import "gonggraph.trans_nodes" for TransNodes
import "gonggraph.component.vert_gong" for VertGong
import "gonggraph.constant" for DOU_H_WIDTH
import "gonggraph.joints_nodes" for JointsNodes
import "gonggraph.ang_helper" for AngHelper
import "maths.vector" for Vector3
import "editor.node_cache" for NODE_CACHE

class Beam is CompNode
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "prev", PIN_TYPE_VERT_GONG),
		]
		this.exports = [
			Pin(this, "next", PIN_TYPE_VERT_GONG),
		]

		this.layout()

		this.beam_h  = 0.21
		this.stright = true
		this.shrink  = false
		this.left    = false
	}

	calc_value(idx)
	{
		return Blueprint.calc_input_value(this, 0)
	}

	resolve(dg)
	{
		var pos = NodeHelper.calc_curr_pos(this, "prev")

		this.comp.pos = pos

		var s = this.stright
		if (s) {
			this.comp.v_geo = this.create_straight(pos)
		} else {
			this.comp.v_geo = this.create_crescent(pos)
		}
	}

	resolve2(dg)
	{
		// todo: v_geo_c
		this.comp.v_geo = AngHelper.ang_cut(this, this.comp.v_geo)
	}

	get_title()
	{
		return "梁"
	}

	create_straight(pos)
	{
		var BEAM = NODE_CACHE.fetch("../yingzao/00_dougong2/45_straight_beam.ves", nil)

		var h = this.beam_h

		var entasis = (h >= 0.24)
		var e_node = VariantProxy(Variant(entasis))
		Blueprint.connect(e_node, "out", BEAM, "entasis")

		var h_node = VariantProxy(Variant(h))
		Blueprint.connect(h_node, "out", BEAM, "height")

		var left_node = VariantProxy(Variant(this.left))
		Blueprint.connect(left_node, "out", BEAM, "left")
		
		var v_geo = TransNodes.translate(BEAM, pos)

		var prev = Blueprint.get_input_node(this, "prev")
		var offset = 0
		if (prev is VertGong) {
			offset = prev.calc_outer_step_len() + DOU_H_WIDTH * 3
		} else {
			offset = 0.25
		}
		if (this.left) {
			offset = -offset
		}

		v_geo = TransNodes.translate(VariantProxy(v_geo), Vector3(0, 0, offset))

		if (this.shrink) {
			var HEAD_CUT = NODE_CACHE.fetch("../yingzao/00_dougong2/40_beam_shrink_body.ves", nil)
			v_geo = JointsNodes.cut_geo_node(v_geo, HEAD_CUT, Vector3(pos.x, pos.y, pos.z - 0.05))
		}

		return v_geo
	}

	create_crescent(pos)
	{
		var BEAM = NODE_CACHE.fetch("../yingzao/00_dougong2/45_crescent_beam.ves", nil)

		var h = this.beam_h
		var h_node = VariantProxy(Variant(h))
		Blueprint.connect(h_node, "out", BEAM, "height")

		var w_node = VariantProxy(Variant(h * 2 / 3))
		Blueprint.connect(w_node, "out", BEAM, "width")

		var left_node = VariantProxy(Variant(this.left))
		Blueprint.connect(left_node, "out", BEAM, "left")

		var prev = Blueprint.get_input_node(this, "prev")
		var offset = 0
		if (prev is VertGong) {
			offset = prev.calc_outer_step_len() + DOU_H_WIDTH
		} else {
			offset = 0.25
		}
		offset = offset + 0.09
		if (this.left) {
			offset = -offset
		}

		var h_len_node = VariantProxy(Variant(offset))
		Blueprint.connect(h_len_node, "out", BEAM, "head_len")

		var v_geo = TransNodes.translate(BEAM, pos)

		v_geo = TransNodes.translate(VariantProxy(v_geo), Vector3(0, 0, offset))

		return v_geo
	}

	is_wide_head()
	{
		return this.stright and !this.shrink
	}
}
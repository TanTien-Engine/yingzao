import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant
import "editor.node_cache" for NODE_CACHE
import "gonggraph.component.comp_node" for CompNode
import "gonggraph.variant" for PIN_TYPE_INNER_GONG, PIN_TYPE_FANG
import "gonggraph.constant" for CAI_HEIGHT, ZU_CAI_HEIGHT
import "gonggraph.trans_nodes" for TransNodes
import "gonggraph.node_helper" for NodeHelper
import "gonggraph.dou_helper" for DouHelper
import "gonggraph.joints_nodes" for JointsNodes
import "gonggraph.corner_builder" for CornerBuilder
import "maths.vector" for Vector3
import "math" for Math

var NI_DAO_GONG     = NODE_CACHE.fetch("../yingzao/00_dougong2/31_nidao_gong.ves", nil)
var BI_NEI_MAN_GONG = NODE_CACHE.fetch("../yingzao/00_dougong2/33_man_gong.ves", nil)

var GD_SUN = NODE_CACHE.fetch("../yingzao/00_dougong2/10_gd_sun.ves", nil)

var JIAOHU_CUT = NODE_CACHE.fetch("../yingzao/00_dougong2/20_jiaohu_tu_cut_body.ves", nil)
var QIXIN_CUT  = NODE_CACHE.fetch("../yingzao/00_dougong2/20_qixin_cut_body.ves", nil)

class InnerGong is CompNode
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "prev", PIN_TYPE_INNER_GONG),
		]
		this.exports = [
			Pin(this, "next", PIN_TYPE_INNER_GONG),
		]

		this.layout()

		this.gong = nil
	}

	calc_value(idx)
	{
		var pos = NodeHelper.calc_curr_pos(this, "prev")
		return Variant(pos.add(Vector3(0, ZU_CAI_HEIGHT, 0)))
	}

	resolve(dg)
	{
		// select gong
		this.gong = this.select_gong()
		if (this.gong == BI_NEI_MAN_GONG) {
			this.exports[0].type = PIN_TYPE_FANG
		}

		// translate
		var pos = NodeHelper.calc_curr_pos(this, "prev")
		var v_geo = TransNodes.translate(this.gong, pos)

		// conn prev
		v_geo = this.add_joint(dg, v_geo, pos)

		// conn next
		v_geo = this.add_dou(dg, v_geo, pos, false, false)

		this.comp.pos = pos
		this.comp.v_geo = v_geo
		this.comp.v_geo_c = CornerBuilder.compose_vert_inner(dg, this)
	}

	select_gong()
	{
		var prev = Blueprint.get_input_node(this, "prev")
		if (prev and prev is InnerGong) {
			return BI_NEI_MAN_GONG
		} else {
			return NI_DAO_GONG
		}
	}

	add_joint(dg, v_geo, pos)
	{
		if (dg.has_vert_gong(this.comp.y_idx)) {
			return v_geo
		}

		var cut_node = nil

		var prev = Blueprint.get_input_node(this, "prev")
		if (prev and prev is InnerGong) {
			cut_node = QIXIN_CUT
		} else {
			cut_node = JIAOHU_CUT
		}

		return JointsNodes.cut_geo_node(v_geo, cut_node, pos)
	}

	add_dou(dg, v_geo, pos, l_dou_jh, r_dou_jh)
	{
		import "gonggraph.component.dou" for SAN_DOU, JIAOHU_DOU, QIXIN_DOU

		var next = NodeHelper.get_output_valid_node(this, "next")
		if (!next) {
			return v_geo
		}

		var dou_pos_x = DouHelper.calc_dou_pos_x(v_geo)
		var l_pos = Vector3(dou_pos_x[0], pos.y + CAI_HEIGHT, pos.z)
		var r_pos = Vector3(dou_pos_x[1], pos.y + CAI_HEIGHT, pos.z)

		var l_sun = TransNodes.translate(GD_SUN, l_pos)
		var r_sun = TransNodes.translate(GD_SUN, r_pos)

		var l_angle = 0
		var r_angle = 0

		var l_dou_node = SAN_DOU
		if (l_dou_jh) {
			l_dou_node = JIAOHU_DOU
			l_angle = Math.pi() * 0.5
		}
		var r_dou_node = SAN_DOU
		if (r_dou_jh) {
			r_dou_node = JIAOHU_DOU
			r_angle = Math.pi() * 0.5
		}

		var l_dou = TransNodes.transform(l_dou_node, l_pos, l_angle)
		var r_dou = TransNodes.transform(r_dou_node, r_pos, r_angle)

		var has_c = !dg.has_vert_gong_or_prev_beam(this.comp.y_idx)
		if (has_c)
		{
			var c_pos = pos.add(Vector3(0, CAI_HEIGHT, 0))

			var c_sun = TransNodes.translate(GD_SUN, c_pos)
			var c_dou = TransNodes.translate(QIXIN_DOU, c_pos)

			v_geo = JointsNodes.cut_geo_node(v_geo, GD_SUN, [ l_pos, c_pos, r_pos ])

			return Variant([ v_geo, [ l_sun, c_sun, r_sun ], [ l_dou, c_dou, r_dou ] ])
		}
		else
		{
			v_geo = JointsNodes.cut_geo_node(v_geo, GD_SUN, [ l_pos, r_pos ])

			return Variant([ v_geo, [ l_sun, r_sun ], [ l_dou, r_dou ] ])
		}
	}

	get_title()
	{
		if (this.gong == NI_DAO_GONG) {
			return "泥道栱"
		} else {
			return "壁内慢栱"
		}
	}	
}
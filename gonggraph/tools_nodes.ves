import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant
import "blueprint.variant_proxy" for VariantProxy
import "blueprint.nodes.list_flatten" for ListFlatten
import "geograph.nodes.box" for Box
import "geograph.nodes.brush_merge" for BrushMerge
import "editor.node_cache" for NODE_CACHE

class ToolsNodes
{
	static pos_debug_geo(pos)
	{
		var b = Box()

		b.query_param("size").value.set(0.02, 2, 0.02)
		b.query_param("pos").value.set(pos.x, pos.y, pos.z)

		b.query_param("offset_y").value = true

		return Blueprint.calc_output_value(b, "geo")
	}

	static brush_merge(v_geo)
	{
		var merge = BrushMerge()

		var geo_node = VariantProxy(Variant(v_geo))
		Blueprint.connect(geo_node, "out", merge, "list")

		return Blueprint.calc_output_value(merge, "brush")
	}

	static is_gong_vert(v_geo)
	{
		var TEST = NODE_CACHE.fetch("../yingzao/00_dougong2/00_is_gong_vert.ves", nil)

		var geo_node = VariantProxy(v_geo)
		Blueprint.connect(geo_node, "out", TEST, "gong")

		return Blueprint.calc_output_value(TEST, "vert").value
	}

	static list_flatten(v_list, deep)
	{
		var flatten = ListFlatten()

		var list_node = VariantProxy(v_list)
		Blueprint.connect(list_node, "out", flatten, "list")

		var deep_node = VariantProxy(Variant(deep))
		Blueprint.connect(deep_node, "out", flatten, "deep")		

		return Blueprint.calc_output_value(flatten, "list")		
	}
}